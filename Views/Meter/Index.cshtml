
@model EBS.viewModels.MeterWrapper

@{
    Layout = "~/Views/Shared/_Layout2.cshtml";

}

<!DOCTYPE html>

<html>
<head>

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" />
    <link href="~/Assets/modal.css" rel="stylesheet" />
    <!-- jQuery -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

    <!-- DataTables -->
    <script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.6/js/dataTables.bootstrap4.min.js"></script>

    <!-- Bootstrap -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.5.2/css/bootstrap.css" rel="stylesheet" />
    <link href="https://cdn.datatables.net/1.13.6/css/dataTables.bootstrap4.min.css" rel="stylesheet" />

    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">


    <style>
        .content {
            display: flex;
            justify-content: center;
            padding: 200px; /* Add padding around the table */
        }

        .table-container {
            max-width: 300px; /* Set a maximum width for the table container */
            width: 10%;
            padding-top: 20px;
        }

        .table thead th {
            white-space: nowrap; /* Prevent text wrapping */
        }

        .container {
            margin-left: 100px;
            padding-top: 30px;
            padding-left: 80px;
            padding-right: 20px;
            padding-bottom: 20px;
        }

        .modal-body {
            width: 100%;
        }
    </style>

    <title>Meters | SEC</title>


</head>
<body>

    <!--Meters Breadcrumb-->
    <ol class="breadcrumb" style="margin-left:130px;">
        <li class="breadcrumb-item">SEC</li>
        <li class="breadcrumb-item"><a href="#">Meters</a></li>
    </ol>

    <!--Create Bulk Button-->
    @*<div class="mt-4 pt-2" style="padding-left: 75px; margin-left:100px">
        <form action="@Url.Action("BulkInsert", "Meter")" method="get">
            <input class="btn btn-secondary btn-lg btn-block" type="submit" value="Bulk Insert" />
        </form>
    </div>*@

    <!--Update Meter Modal-->
    <div class="modal fade" id="updateMeterModal" data-backdrop="static" data-keyboard="false" tabindex="-1" aria-labelledby="createInvoiceModalLabel" aria-hidden="true" style="color:black">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title" id="createInvoiceModalLabel"> <strong>Update Meter</strong></h3>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="card rounded shadow">
                        <div class="card-body">
                            @using (Html.BeginForm("UpdateMeter", "Meter", FormMethod.Post, new { id = "updateMeterForm" }))
                            {
                                @Html.AntiForgeryToken()
                                @Html.HiddenFor(model => model.MeterID, new { id = "meterID" })

                                <div class="card shadow-2-strong card-registration" style="border-radius: 15px;">

                                    <div class="card-body p-4 p-md-5">
                                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                                        <div class="row">
                                            <div class="col-md-6 mb-4">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(m => m.cID)
                                                    @Html.EditorFor(model => model.cID, new { htmlAttributes = new { @class = "form-control form-control-lg", id = "cIDUpdate" } })
                                                    @Html.ValidationMessageFor(model => model.cID, "", new { @class = "text-danger" })
                                                </div>

                                            </div>
                                            <div class="col-md-6 mb-4">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(model => model.Type)
                                                    @Html.EditorFor(model => model.Type, new { htmlAttributes = new { @class = "form-control form-control-lg", id = "typeUpdate" } })
                                                    @Html.ValidationMessageFor(model => model.Type, "", new { @class = "text-danger" })
                                                </div>

                                            </div>
                                        </div>

                                        <div class="row">
                                            <div class="col-md-6 mb-4">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(m => m.lockNumber)
                                                    @Html.EditorFor(model => model.lockNumber, new { htmlAttributes = new { @class = "form-control form-control-lg", id = "lockNUpdate" } })
                                                    @Html.ValidationMessageFor(model => model.lockNumber, "", new { @class = "text-danger" })
                                                </div>

                                            </div>

                                            <div class="col-md-6 mb-4">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(model => model.Status)
                                                    @Html.EditorFor(model => model.Status, new { htmlAttributes = new { @class = "form-control form-control-lg", id = "statusUpdate" } })
                                                    @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
                                                </div>

                                            </div>
                                        </div>

                                        <!--Below div element holds some buttons. Leave it alone-->
                                        <div class="row">
                                            <div class="col-md-6 mb-4 pb-2">
                                                <input type="submit" value="Update" class="btn btn-primary btn-lg btn-block" />

                                            </div>
                                        </div>

                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!--Delete Meter Modal-->
    <div class="modal fade" id="deleteMeterModal" data-backdrop="static" data-keyboard="false" tabindex="-1" aria-labelledby="createInvoiceModalLabel" aria-hidden="true" style="color:black">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title" id="createInvoiceModalLabel"> <strong>Delete Meter</strong></h3>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="card rounded shadow">
                        <div class="card-body">
                            @using (Html.BeginForm("Delete", "Meter", FormMethod.Post))
                            {
                                @Html.AntiForgeryToken()
                                @Html.HiddenFor(model => model.MeterID, new { id = "meterIDDelete" })

                                <div class="card shadow-2-strong card-registration" style="border-radius: 15px;">

                                    <div class="card-body p-4 p-md-5">
                                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                                        <div class="row">
                                            <div class="col-md-6 mb-4">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(m => m.cID)
                                                    @Html.EditorFor(model => model.cID, new { htmlAttributes = new { @class = "form-control form-control-lg", id = "cIDDelete", @readonly = "readonly" } })
                                                    @Html.ValidationMessageFor(model => model.cID, "", new { @class = "text-danger" })
                                                </div>

                                            </div>
                                            <div class="col-md-6 mb-4">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(model => model.Type)
                                                    @Html.EditorFor(model => model.Type, new { htmlAttributes = new { @class = "form-control form-control-lg", id = "typeDelete", @readonly = "readonly" } })
                                                    @Html.ValidationMessageFor(model => model.Type, "", new { @class = "text-danger" })
                                                </div>

                                            </div>
                                        </div>

                                        <div class="row">
                                            <div class="col-md-6 mb-4">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(m => m.lockNumber)
                                                    @Html.EditorFor(model => model.lockNumber, new { htmlAttributes = new { @class = "form-control form-control-lg", id = "lockNDelete", @readonly = "readonly" } })
                                                    @Html.ValidationMessageFor(model => model.lockNumber, "", new { @class = "text-danger" })
                                                </div>

                                            </div>

                                            <div class="col-md-6 mb-4">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(model => model.Status)
                                                    @Html.EditorFor(model => model.Status, new { htmlAttributes = new { @class = "form-control form-control-lg", id = "statusDelete", @readonly = "readonly" } })
                                                    @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
                                                </div>

                                            </div>
                                        </div>

                                        <!--Below div element holds some buttons. Leave it alone-->
                                        <div class="row">
                                            <div class="col-md-6 mb-4 pb-2">
                                                <button type="submit" class="btn btn-danger btn-lg btn-block">Delete</button>
                                            </div>
                                        </div>

                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!--Index: DataTable-->
    <div class="container">
        <table id="myTable" class="table table-striped table-bordered" style="width:100%">
            <thead>
                <tr>
                    <th>Meter ID</th>
                    <th>Customer ID</th>
                    <th>Lock Number</th>
                    <th>Type</th>
                    <th>Status</th>
                    <th>Actions</th>

                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.meterList)
                {
                    <tr>

                        <td>@Html.DisplayFor(model => item.MeterID)</td>
                        <td>@Html.DisplayFor(model => item.cID)</td>
                        <td>@Html.DisplayFor(model => item.lockNumber)</td>
                        <td>@Html.DisplayFor(model => item.Type)</td>
                        <td>@Html.DisplayFor(model => item.Status)</td>
                        <td>

                            <a href="#" data-toggle="modal" data-target="#updateMeterModal" id="@item.MeterID">
                                <i class="fa-solid fa-square-pen fa-2x" style="color: #1ABC9C;"></i>
                            </a>

                            <a href="#" data-toggle="modal" data-target="#deleteMeterModal" id="@item.MeterID">
                                <i class="fas fa-trash fa-2x delete-icon item" style="color: #FF5733"></i>
                            </a>

                        </td>

                    </tr>
                }


            </tbody>
        </table>
    </div>


    <script>
        new DataTable('#myTable');
    </script>

    <!--Meter Data Fetching Script (Update)-->
    <script>

                        console.log('I am being reached');

                            $(document).ready(function () {
                                $("a[data-toggle='modal']").click(function () {
                                    var meterID = $(this).attr("id");
                                $.ajax({
                            url: '@Url.Action("GetMeterData", "Meter")',
                            type: 'POST',
                            data: { id: meterID },
                            success: function (data) {
                                // Populate the form fields with the retrieved data
                                $("#meterID").val(meterID);
                                $("#cIDUpdate").val(cID);
                                $("#lockNUpdate").val(data.lockNumber);
                                $("#typeUpdate").val(data.Type);
                                $("#statusUpdate").val(data.Status);

                            },
                            error: function () {
                                alert("Error fetching meter data.");
                            }
                        });
                    });
                });
    </script>

    <!--Update Meter Script-->
    <script>
    $(document).ready(function () {
        $("#updateMeterForm").submit(function (e) {
            e.preventDefault(); // Prevent the default form submission

            var formData = $(this).serialize(); // Serialize form data

            $.ajax({
                type: "POST",
                url: "@Url.Action("UpdateMeter", "Meter")",
                data: formData,
                success: function (response) {
                    if (response.success) {
                        alert(response.message);
                        location.reload();
                    } else {
                        alert("Failed to update meter!.");
                    }
                },
                error: function () {
                    alert("An error occurred while updating the meter.");
                }
            });
        });
    });
    </script>

    <!--Meter Data Fetching Script (Delete)-->
    <script>

                        console.log('I am being reached');

                            $(document).ready(function () {
                                $("a[data-toggle='modal']").click(function () {
                                    window.meterID = $(this).attr("id");
                                $.ajax({
                            url: '@Url.Action("GetMeterData", "Meter")',
                            type: 'POST',
                            data: { id: meterID },
                            success: function (data) {
                                // Populate the form fields with the retrieved data
                                $("#meterIDDelete").val(meterID);
                                $("#cIDDelete").val(cID);
                                $("#lockNDelete").val(data.lockNumber);
                                $("#typeDelete").val(data.Type);
                                $("#statusDelete").val(data.Status);

                            },
                            error: function () {
                                alert("Error fetching meter data.");
                            }
                        });
                    });
                });
    </script>

    <!--Delete Invoice Script -->
    <script>
    console.log('I am being reached');

    // Function to handle the delete operation
    function handleDeleteClick() {
        // Access the global variable window.invID
        var metID = window.meterID;

        $.ajax({
            url: '@Url.Action("Delete", "Meter")',
            type: 'POST',
            data: { id: metID },
            success: function (response) {
                if (response.success) {
                    alert(response.message);
                    location.reload();
                } else {
                    alert("Failed to delete meter!.");
                }
            },
            error: function () {
                alert("An error occurred while deleting the meter.");
            }
        });
    }

    $(document).ready(function () {
        $("button[type='submit']").click(function (e) {
            e.preventDefault(); // Prevent the default form submission

            // Call the function to handle the delete operation
            handleDeleteClick();
        });
    });
    </script>

</body>
</html>
