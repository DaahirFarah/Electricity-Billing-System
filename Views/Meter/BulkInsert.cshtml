
@model List<EBS.viewModels.MeterWrapper>

@{
    Layout = "~/Views/Shared/_Layout2.cshtml";
}

<style>
    .content {
        display: flex;
        justify-content: center;
        padding: 20px; /* Add padding around the table */
    }

    .table-container {
        max-width: 700px; /* Set a maximum width for the table container */
        width: 10%;
        padding-top: 20px;
    }

    .table thead th {
        white-space: nowrap; /* Prevent text wrapping */
    }

    .container {
        margin-left: 300px;
        padding-top: 30px;
        padding-left: 35px;
        padding-bottom: 20px;
    }
</style>

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>Create Meters | SEC</title>
</head>
<body>

    <div id="container">
        @using (Html.BeginForm("BulkInsert", "Meter", FormMethod.Post))
        {
            @Html.AntiForgeryToken()

            <table class="table">
                <thead class="thead-light">
                    <tr>
                        <th>Serial Number</th>
                        <th>Type</th>
                        <th>Status</th>
                    </tr>
                </thead>
                <tbody>
                    @for (int i = 0; i < 5; i++)
                    {
                        <tr>
                            <td>
                                @Html.LabelFor(m => Model[i].SerialNumber)
                                @Html.EditorFor(model => Model[i].SerialNumber, new { htmlAttributes = new { @class = "form-control form-control-lg form-control-serial" } })
                                @Html.ValidationMessageFor(m => Model[i].SerialNumber, "", new { @class = "text-danger" })
                            </td>
                            <td>
                                @Html.LabelFor(m => Model[i].Type)
                                @Html.EditorFor(model => Model[i].Type, new { htmlAttributes = new { @class = "form-control form-control-lg form-control-type" } })
                                @Html.ValidationMessageFor(m => Model[i].Type, "", new { @class = "text-danger" })
                            </td>
                            <td>
                                @Html.LabelFor(m => Model[i].Status)
                                @Html.EditorFor(model => Model[i].Status, new { htmlAttributes = new { @class = "form-control form-control-lg form-control-status" } })
                                @Html.ValidationMessageFor(m => Model[i].Status, "", new { @class = "text-danger" })
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

            <br />
            <br />

            <div class="col-md-6 mb-4 pb-2" style="display: flex; justify-content: center; align-items: center;">
                <button type="submit" value="Create" class="btn btn-success btn-lg btn-block">Insert</button>
            </div>
        }

    </div>

    <div class="modal fade" id="validationModal" tabindex="-1" role="dialog" aria-labelledby="validationModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="validationModalLabel">Validation Error</h5>
                    @*<button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>*@
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    Please enter valid data.
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" data-dismiss="modal">OK</button>
                </div>
            </div>
        </div>
    </div>


</body>
</html>

<!--Form Fields Validation Script-->
<script>
    // Function to hide the modal
    function hideValidationModal() {
        $('#validationModal').modal('hide');
    }

    // Text Input Validation
    function validateText(input) {
        if (!isNaN(Number(input.value))) {
            // Show a Bootstrap modal with the validation message
            $('#validationModal').modal('show');
            input.value = '';
        }
    }

    // Number validation function
    function validateNumber(input) {
        if (isNaN(Number(input.value))) {
            // Show a Bootstrap modal with the validation message
            $('#validationModal').modal('show');
            input.value = '';
        }
    }

    // Attach listeners to input fields by class when they lose focus (blur)
    const serialInputs = document.querySelectorAll('.form-control-serial');
    const typeInputs = document.querySelectorAll('.form-control-type');
    const statusInputs = document.querySelectorAll('.form-control-status');

    serialInputs.forEach(input => {
        input.addEventListener('blur', () => {
            validateNumber(input);
        });
    });

    typeInputs.forEach(input => {
        input.addEventListener('blur', () => {
            validateText(input);
        });
    });

    statusInputs.forEach(input => {
        input.addEventListener('blur', () => {
            validateText(input);
        });
    });

    // Attach click event listener to the "OK" button in the modal
    document.getElementById('modalOkButton').addEventListener('click', hideValidationModal);
</script>



