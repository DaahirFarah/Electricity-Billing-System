
@model EBS.viewModels.invoiceVM

@{
    Layout = "~/Views/Shared/_Layout2.cshtml";
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Create Invoice | SEC</title>
    <link href="~/Content/Registeration.css" rel="stylesheet" />

</head>
<body>

    @using (Html.BeginForm("Create", "Invoice", FormMethod.Post))
    {
        @Html.AntiForgeryToken()

    <section class="vh-100 gradient-custom;" ; style="font-family: Verdana, Geneva, Tahoma, sans-serif; ">
        <div class="container py-5 h-100">
            <div class="row justify-content-center align-items-center h-100">

                <div class="col-12 col-lg-9 col-xl-7">
                    <div class="card shadow-2-strong card-registration" style="border-radius: 15px;">

                        <div class="card-body p-4 p-md-5">
                            <h2 class="mb-4 pb-2 pb-md-0 mb-md-5"><strong>Create Invoice</strong></h2>
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                        <div class="row">
                            <div class="col-md-6 mb-4">

                                <div class="form-outline form-group">
                                    @Html.LabelFor(m => m.cID)
                                    @Html.EditorFor(model => model.cID, new { htmlAttributes = new { @class = "form-control form-control-lg", id = "cID" } })
                                    @Html.ValidationMessageFor(model => model.cID, "", new { @class = "text-danger" })
                                </div>

                            </div>

                            <div class="col-md-6 mb-4">

                                <div class="form-outline form-group">
                                    @Html.LabelFor(model => model.reading_Date)
                                    @Html.EditorFor(model => model.reading_Date, new { htmlAttributes = new { @class = "form-control form-control-lg", Type = "date", id = "rDate" } })
                                    @Html.ValidationMessageFor(model => model.reading_Date, "", new { @class = "text-danger" })
                                </div>

                            </div>

                        </div>
                                              
                            <div class="row">
                                <div class="col-md-6 mb-4">

                                    <div class="form-outline form-group">
                                        @Html.LabelFor(m => m.prev_Reading)
                                        @Html.EditorFor(model => model.prev_Reading, new { htmlAttributes = new { @class = "form-control form-control-lg", id = "prev_Reading" } })
                                        @Html.ValidationMessageFor(model => model.prev_Reading, "", new { @class = "text-danger" })
                                    </div>

                                </div>
                                <div class="col-md-6 mb-4">

                                    <div class="form-outline form-group">
                                        @Html.LabelFor(model => model.cur_Reading)
                                        @Html.EditorFor(model => model.cur_Reading, new { htmlAttributes = new { @class = "form-control form-control-lg", id = "cur_Reading" } })
                                        @Html.ValidationMessageFor(model => model.cur_Reading, "", new { @class = "text-danger" })
                                    </div>

                                </div>
                            </div>


                            <div class="row">
                                <div class="col-md-6 mb-4">

                                    <div class="form-outline form-group">
                                        @Html.LabelFor(m => m.reading_Value)
                                        @Html.EditorFor(model => model.reading_Value, new { htmlAttributes = new { @class = "form-control form-control-lg", id = "reading_Value", @readonly = "readonly" } })
                                        @Html.ValidationMessageFor(model => model.reading_Value, "", new { @class = "text-danger" })
                                    </div>

                                </div>
                                
                            </div>
                                                       
                                <!--Below div element holds some buttons. Leave it alone-->
                                <div class="row">
                                    <div class="col-md-6 mb-4 pb-2">
                                        <input type="submit" value="Create" class="btn btn-success btn-lg btn-block" />

                                    </div>


                                    <div class="col-md-6 mb-4 pb-2">
                                        @Html.ActionLink("Back", "Index", "Invoice", null, new { @class = "btn btn-secondary btn-lg btn-block" })
                                    </div>

                                </div>


                            
                        </div>
                    </div>
                </div>
            </div>
        </div>

      <script>

            console.log('I am being reached');

             $(document).ready(function () {
                $("#cID").blur(function () {
                var customerID = $(this).val();

            $.ajax({
                url: '@Url.Action("GetRelatedData", "Invoice")',
                type: 'POST',
                data: { id: customerID },
                success: function (data) {
                    // Populate the form fields with the retrieved data
                    $("#prev_Reading").val(data.cur_Reading);
                    
                },
                error: function () {
                    alert("Error fetching user profile data.");
                }
            });
        });
    });
        </script>  

        <script>

                // Number validation function
                function validateNumber(input) {
                if (isNaN(Number(input.value))) {
                    alert('Please enter a number');
                input.value = '';
                }
            }

                // Get elements
                const cID = document.querySelector('#cID');
                const prev_Reading = document.querySelector('#prev_Reading');
                const cur_Reading = document.querySelector('#cur_Reading');

            // Attach listeners
            

            cID.addEventListener('input', () => {
                    validateNumber(cID);
            });

            prev_Reading.addEventListener('input', () => {
                validateNumber(prev_Reading);
            });

            cur_Reading.addEventListener('input', () => {
                validateNumber(cur_Reading);
            });


            $(document).ready(function () {
                $('#Rate, #reading_Value, #cur_Reading, #prev_Reading').on('input', function () {
                    var Rate = parseFloat($('#Rate').val());
                    var cur_Reading = parseFloat($('#cur_Reading').val());
                    var prev_Reading = parseFloat($('#prev_Reading').val());
                    var rDate = ($('#rDate').val());

                    var calculatedReading = isNaN(cur_Reading) || isNaN(prev_Reading) ? '' : (cur_Reading - prev_Reading).toFixed(2);
                    $('#reading_Value').val(calculatedReading); // Update the readonly reading_Value field

                    if (cur_Reading < prev_Reading) {
                        window.alert('Current Reading Must be Greater Than Previous Reading')
                    }

                    //// Calculate Rate based on reading_Value
                    //var readingValue = parseFloat(calculatedReading);
                    //if (!isNaN(readingValue)) {
                    //    if (readingValue < 100) {
                    //        Rate = 0.5;
                    //    } else if (readingValue < 300) {
                    //        Rate = 0.4;
                    //    } else {
                    //        Rate = 0.3;
                    //    }
                    //}
                    //$('#Rate').val(Rate.toFixed(2)); // Update the readonly Rate field

                    //var result = isNaN(Rate) || isNaN(calculatedReading) ? '' : (Rate * calculatedReading).toFixed(2);
                    //$('#result').val(result); // Update the readonly result field
                });
            });
        </script>

    </section>

    }
</body>
</html>



