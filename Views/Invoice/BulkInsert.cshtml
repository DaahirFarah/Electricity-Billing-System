
@model List<EBS.viewModels.invoiceVM>

@{
    Layout = "~/Views/Shared/_Layout2.cshtml";
}

<style>
    .content {
        display: flex;
        justify-content: center;
        padding: 20px; /* Add padding around the table */
    }

    .table-container {
        max-width: 700px; /* Set a maximum width for the table container */
        width: 10%;
        padding-top: 20px;
    }

    .table thead th {
        white-space: nowrap; /* Prevent text wrapping */
    }

    .container {
        margin-left: 259px;
        padding-top: 30px;
        padding-left: 35px;
        padding-bottom: 20px;
    }
</style>

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>Insert Invoices | SEC</title>
</head>
<body>

    <div id="container">
        <h2><strong>Insert Invoices</strong></h2>

        <br />


        @using (Html.BeginForm("BulkInsert", "Invoice", FormMethod.Post))
        {
            @*@Html.AntiForgeryToken()*@


            <table class="table">
                <thead class="thead-light">
                    <tr>
                        <th>Check</th>
                        <th>Customer ID</th>
                        <th>Reading Date</th>
                        <th>Previous Reading</th>
                        <th>Current Reading</th>
                        <th>Usage(KwH)</th>
                        @*<th>Rate</th>
                        <th>Charge($)</th>
                        <th>Balance($)</th>
                        <th>Amount Due($)</th>*@
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @for (int i = 0; i < 2; i++)
                    {
                        <tr>
                            <td>
                                <input type="checkbox" class="form-check-input" name="invCheck" style="width: 20px; height: 20px; margin-top:13px; margin-left:15px;" />
                            </td>

                            <td>
                                @Html.EditorFor(model => Model[i].cID, new { htmlAttributes = new { @class = "form-control form-control-lg form-control-cID" } })
                                @Html.ValidationMessageFor(m => Model[i].cID, "", new { @class = "text-danger" })
                            </td>
                            <td>
                                @Html.EditorFor(model => Model[i].reading_Date, new { htmlAttributes = new { @class = "form-control form-control-lg form-control-rDate", type = "Date" } })
                                @Html.ValidationMessageFor(m => Model[i].reading_Date, "", new { @class = "text-danger" })
                            </td>
                           
                            <td>
                                @Html.EditorFor(model => Model[i].prev_Reading, new { htmlAttributes = new { @class = "form-control form-control-lg form-control-prev_Reading" } })
                                @Html.ValidationMessageFor(m => Model[i].prev_Reading, "", new { @class = "text-danger" })
                            </td>

                            <td>
                                @Html.EditorFor(model => Model[i].cur_Reading, new { htmlAttributes = new { @class = "form-control form-control-lg form-control-cur_Reading" } })
                                @Html.ValidationMessageFor(m => Model[i].cur_Reading, "", new { @class = "text-danger" })
                            </td>

                            <td>
                                @Html.EditorFor(model => Model[i].reading_Value, new { htmlAttributes = new { @class = "form-control form-control-lg form-control-reading_Value", @readonly = "readonly" } })
                                @Html.ValidationMessageFor(m => Model[i].reading_Value, "", new { @class = "text-danger" })
                            </td>

                            <td>
                                <button class="btn btn-success btn-lg btn-block btn-save-row" id="saverow" type="button">Save</button>
                            </td>

                        </tr>
                    }
                </tbody>
            </table>

            <br />
            <br />

            <div class="col-md-6 mb-4 pb-2" style="justify-content: center; align-items: center;">
                <button id="save-all-button" class="btn btn-success btn-lg btn-block" type="button">Save All</button>
            </div>
        }

    </div>

    <div class="modal fade" id="validationModal" tabindex="-1" role="dialog" aria-labelledby="validationModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="validationModalLabel">Validation Error</h5>

                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    Please enter valid data.
                </div>

            </div>
        </div>
    </div>


</body>
</html>

<!--Form Fields Validation Script-->
<script>
    // Function to hide the modal
    function hideValidationModal() {
        $('#validationModal').modal('hide');
    }

    // Text Input Validation
    function validateText(input) {
        if (!isNaN(Number(input.value))) {
            // Show a Bootstrap modal with the validation message
            $('#validationModal').modal('show');
            input.value = '';
        }
    }

    // Number validation function
    function validateNumber(input) {
        if (isNaN(Number(input.value))) {
            // Show a Bootstrap modal with the validation message
            $('#validationModal').modal('show');
            input.value = '';
        }
    }

    // Date Validation function
    function validateDate(input) {
        var enteredDate = new Date(input.value); // Get the value from the input element
        var currentDate = new Date();
        var lastDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);
        var minDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), 25);

        if (enteredDate < minDate || enteredDate > lastDayOfMonth) {
            alert("Enter a date between the 25th and the last day of the month.");
            // Clear the input field
            input.value = ''; // Set the input field's value to an empty string
        }
    }

    // Attach listeners to input fields by class when they lose focus (blur)
    const cID = document.querySelectorAll('.form-control-cID');
    const prev_Reading = document.querySelectorAll('.form-control-prev_Reading');
    const cur_Reading = document.querySelectorAll('.form-control-cur_Reading');
    const rDate = document.querySelectorAll('.form-control-rDate');


    cID.forEach(input => {
        input.addEventListener('blur', () => {
            validateNumber(input);
        });
    });

    prev_Reading.forEach(input => {
        input.addEventListener('blur', () => {
            validateNumber(input);
        });
    });

    cur_Reading.forEach(input => {
        input.addEventListener('blur', () => {
            validateNumber(input);
        });
    });

    // Assuming rDate is an array of input elements
    rDate.forEach(input => {
        input.addEventListener('blur', () => {
            validateDate(input);
        });
    });

    //Perform Usage Calculation
    $(document).ready(function () {
        $('.form-control-prev_Reading, .form-control-cur_Reading').on('blur', function () {
            // Get values from corresponding fields
            var cur_Reading = parseFloat($(this).closest('tr').find('.form-control-cur_Reading').val());
            var prev_Reading = parseFloat($(this).closest('tr').find('.form-control-prev_Reading').val());
            var rDate = $(this).closest('tr').find('.form-control-reading_Value').val();

            // Calculate the reading difference
            var calculatedReading = isNaN(cur_Reading) || isNaN(prev_Reading) ? '' : (cur_Reading - prev_Reading).toFixed(2);

            // Update the readonly reading_Value field in the same row
            $(this).closest('tr').find('.form-control-reading_Value').val(calculatedReading);

            // Perform additional validation if needed
            if (cur_Reading < prev_Reading) {
                window.alert('Current Reading Must be Greater Than Previous Reading');
            }
        });


$('.btn-save-row').on('click', function () {
  // Get the current row
  var row = $(this).closest('tr');

  // Check if the corresponding checkbox is checked
  var checkbox = row.find('input[type="checkbox"]');
  if (checkbox.is(':checked')) {
    // Construct the data object from row elements
    var model = {
      cID: row.find('.form-control-cID').val(),
      reading_Date: row.find('.form-control-rDate').val(),
      prev_Reading: row.find('.form-control-prev_Reading').val(),
      cur_Reading: row.find('.form-control-cur_Reading').val(),
      reading_Value: row.find('.form-control-reading_Value').val(),
      };

      var models = [];
      models.push(model);
    // Send the form data to the server via AJAX
    $.ajax({
      type: "POST",
      url: "@Url.Action("BulkInsert", "Invoice")",
        data: JSON.stringify({ models: models }), 
      contentType: "application/json",
      success: function (response, status, xhr) {
        // Check the response status code
        if (status === 'success') {
          alert("Row inserted successfully.");
        } else {
          // Handle error, e.g., show an error message to the user
          alert("Error inserting row into the database: " + response.statusText);
        }
      },
      error: function (xhr, status, error) {
        alert("Error inserting row into the database: " + error);
      }
    });
  }
});


    });

</script>

<!--Get related Data for each record-->
<script>
    console.log('Script is being reached');

    $(document).ready(function () {
        // Attach a blur event listener to the "invoiceID" field in each row
        $(".form-control-cID").blur(function () {
            var cID = $(this).val();
            var row = $(this).closest("tr"); // Get the parent row

            $.ajax({
                url: '@Url.Action("GetRelatedData", "Invoice")',
                type: 'POST',
                data: { id: cID },
                success: function (data) {
                    // Populate the form fields within the current row with the retrieved data
                    row.find(".form-control-prev_Reading").val(data.cur_Reading);
                },
                error: function () {
                    alert("Error fetching Customer data.");
                }
            });
        });
    });
</script>

