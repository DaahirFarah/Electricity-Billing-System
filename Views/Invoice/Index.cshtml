﻿
@model EBS.viewModels.invWrapper

@{
    ViewBag.Title = "Invoices | SEC";
    Layout = "~/Views/Shared/_Layout2.cshtml";

}

<!DOCTYPE html>

<html>
<head>

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" />
    <link href="~/Assets/modal.css" rel="stylesheet" />
    <!-- jQuery -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

    <!-- DataTables -->
    <script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.6/js/dataTables.bootstrap4.min.js"></script>

    <!-- Bootstrap -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.5.2/css/bootstrap.css" rel="stylesheet" />
    <link href="https://cdn.datatables.net/1.13.6/css/dataTables.bootstrap4.min.css" rel="stylesheet" />

    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">


    <style>
        .content {
            display: flex;
            justify-content: center;
            padding: 200px; /* Add padding around the table */
        }

        .table-container {
            max-width: 300px; /* Set a maximum width for the table container */
            width: 10%;
            padding-top: 20px;
        }

        .table thead th {
            white-space: nowrap; /* Prevent text wrapping */
        }

        .container {
            margin-left: 100px;
            padding-top: 30px;
            padding-left: 40px;
            padding-right: 20px;
            padding-bottom: 20px;
        }

        .modal-body {
            width: 100%;
        }
    </style>

    <title>Invoices | SEC</title>


</head>
<body>

    <ol class="breadcrumb" style="margin-left:130px;">
        <li class="breadcrumb-item">SEC</li>
        <li class="breadcrumb-item"><a href="#">Invoices</a></li>
    </ol>

    <div class="mt-4 pt-2" style="padding-left: 40px; margin-left: 100px;">
        <form action="@Url.Action("BulkInsert", "Invoice")" method="get">
            <input class="btn btn-secondary btn-lg btn-block" type="submit" value="Bulk Insert" />
        </form>
    </div>

    <!--Modal Activation Button-->
    <div class="mt-4 pt-2" style="padding-left: 40px; margin-left: 100px;">

        <input data-toggle="modal" data-target="#createInvoiceModal" class="btn btn-primary btn-lg btn-block" type="submit" value="Create Invoice" />

    </div>
    <!--Create Invoice Modal-->
    <div class="modal fade" id="createInvoiceModal" data-backdrop="static" data-keyboard="false" tabindex="-1" aria-labelledby="createInvoiceModalLabel" aria-hidden="true" style="color:black">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title" id="createInvoiceModalLabel"> <strong>Create Invoice</strong></h3>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="card rounded shadow">
                        <div class="card-body">
                            @using (Html.BeginForm("Create", "Invoice", FormMethod.Post))
                            {
                                @Html.AntiForgeryToken()

                                <div class="card shadow-2-strong card-registration" style="border-radius: 15px;">

                                    <div class="card-body p-4 p-md-5">
                                        @*<h2 class="mb-4 pb-2 pb-md-0 mb-md-5"><strong>Create Invoice</strong></h2>*@
                                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                                        <div class="row">
                                            <div class="col-md-6 mb-4">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(m => m.cID)
                                                    @Html.EditorFor(model => model.cID, new { htmlAttributes = new { @class = "form-control form-control-lg", id = "cID" } })
                                                    @Html.ValidationMessageFor(model => model.cID, "", new { @class = "text-danger" })
                                                </div>

                                            </div>

                                            <div class="col-md-6 mb-4">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(model => model.reading_Date)
                                                    @Html.EditorFor(model => model.reading_Date, new { htmlAttributes = new { @class = "form-control form-control-lg", Type = "date", id = "rDate" } })
                                                    @Html.ValidationMessageFor(model => model.reading_Date, "", new { @class = "text-danger" })
                                                </div>

                                            </div>

                                        </div>

                                        <div class="row">
                                            <div class="col-md-6 mb-4">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(m => m.prev_Reading)
                                                    @Html.EditorFor(model => model.prev_Reading, new { htmlAttributes = new { @class = "form-control form-control-lg", id = "prev_Reading" } })
                                                    @Html.ValidationMessageFor(model => model.prev_Reading, "", new { @class = "text-danger" })
                                                </div>

                                            </div>
                                            <div class="col-md-6 mb-4">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(model => model.cur_Reading)
                                                    @Html.EditorFor(model => model.cur_Reading, new { htmlAttributes = new { @class = "form-control form-control-lg", id = "cur_Reading" } })
                                                    @Html.ValidationMessageFor(model => model.cur_Reading, "", new { @class = "text-danger" })
                                                </div>

                                            </div>
                                        </div>


                                        <div class="row">
                                            <div class="col-md-6 mb-4">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(m => m.reading_Value)
                                                    @Html.EditorFor(model => model.reading_Value, new { htmlAttributes = new { @class = "form-control form-control-lg", id = "reading_Value", @readonly = "readonly" } })
                                                    @Html.ValidationMessageFor(model => model.reading_Value, "", new { @class = "text-danger" })
                                                </div>

                                            </div>

                                        </div>

                                        <!--Below div element holds some buttons. Leave it alone-->
                                        <div class="row">
                                            <div class="col-md-6 mb-4 pb-2">
                                                <input type="submit" value="Create" class="btn btn-success btn-lg btn-block" />

                                            </div>
                                        </div>

                                        <script>

                                            // Number validation function
                                            function validateNumber(input) {
                                                if (isNaN(Number(input.value))) {
                                                    alert('Please enter a number');
                                                    input.value = '';
                                                }
                                            }

                                            // Get elements
                                            const cID = document.querySelector('#cID');
                                            const prev_Reading = document.querySelector('#prev_Reading');
                                            const cur_Reading = document.querySelector('#cur_Reading');

                                            // Attach listeners


                                            cID.addEventListener('blur', () => {
                                                validateNumber(cID);
                                            });

                                            prev_Reading.addEventListener('input', () => {
                                                validateNumber(prev_Reading);
                                            });

                                            cur_Reading.addEventListener('blur', () => {
                                                validateNumber(cur_Reading);
                                            });


                                            $(document).ready(function () {
                                                $('#Rate, #reading_Value, #cur_Reading, #prev_Reading').on('input', function () {
                                                    var Rate = parseFloat($('#Rate').val());
                                                    var cur_Reading = parseFloat($('#cur_Reading').val());
                                                    var prev_Reading = parseFloat($('#prev_Reading').val());
                                                    var rDate = ($('#rDate').val());

                                                    var calculatedReading = isNaN(cur_Reading) || isNaN(prev_Reading) ? '' : (cur_Reading - prev_Reading).toFixed(2);
                                                    $('#reading_Value').val(calculatedReading); // Update the readonly reading_Value field

                                                    if (cur_Reading < prev_Reading) {
                                                        window.alert('Current Reading Must be Greater Than Previous Reading')
                                                    }

                                                });
                                            });
                                        </script>

                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!--Update Invoice Modal-->
    <div class="modal fade" id="updateInvoiceModal" data-backdrop="static" data-keyboard="false" tabindex="-1" aria-labelledby="createInvoiceModalLabel" aria-hidden="true" style="color:black">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title" id="createInvoiceModalLabel"> <strong>Update Invoice</strong></h3>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="card rounded shadow">
                        <div class="card-body">
                            @using (Html.BeginForm("UpdateInvoice", "Invoice", FormMethod.Post, new { id = "updateForm" }))
                            {
                                @Html.AntiForgeryToken()
                                @Html.HiddenFor(model => model.invoiceID, new { id = "invoiceID" })

                                <div class="card shadow-2-strong card-registration" style="border-radius: 15px;">

                                    <div class="card-body p-4 p-md-5">
                                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                                        <div class="row">
                                            <div class="col-md-6 mb-4">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(m => m.cID)
                                                    @Html.EditorFor(model => model.cID, new { htmlAttributes = new { @class = "form-control form-control-lg", id = "cIDEdit" } })
                                                    @Html.ValidationMessageFor(model => model.cID, "", new { @class = "text-danger" })
                                                </div>

                                            </div>

                                            <div class="col-md-6 mb-4">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(model => model.reading_Date)
                                                    @Html.EditorFor(model => model.reading_Date, new { htmlAttributes = new { @class = "form-control form-control-lg", Type = "date", id = "rDateEdit" } })
                                                    @Html.ValidationMessageFor(model => model.reading_Date, "", new { @class = "text-danger" })
                                                </div>

                                            </div>

                                        </div>

                                        <div class="row">
                                            <div class="col-md-6 mb-4">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(m => m.prev_Reading)
                                                    @Html.EditorFor(model => model.prev_Reading, new { htmlAttributes = new { @class = "form-control form-control-lg", id = "prev_ReadingEdit" } })
                                                    @Html.ValidationMessageFor(model => model.prev_Reading, "", new { @class = "text-danger" })
                                                </div>

                                            </div>
                                            <div class="col-md-6 mb-4">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(model => model.cur_Reading)
                                                    @Html.EditorFor(model => model.cur_Reading, new { htmlAttributes = new { @class = "form-control form-control-lg", id = "cur_ReadingEdit" } })
                                                    @Html.ValidationMessageFor(model => model.cur_Reading, "", new { @class = "text-danger" })
                                                </div>

                                            </div>
                                        </div>


                                        <div class="row">
                                            <div class="col-md-6 mb-4">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(m => m.reading_Value)
                                                    @Html.EditorFor(model => model.reading_Value, new { htmlAttributes = new { @class = "form-control form-control-lg", id = "reading_ValueEdit", @readonly = "readonly" } })
                                                    @Html.ValidationMessageFor(model => model.reading_Value, "", new { @class = "text-danger" })
                                                </div>

                                            </div>

                                        </div>

                                        <div class="row">
                                            <div class="col-md-6 mb-4 pb-2">
                                                <input type="submit" value="Update" class="btn btn-primary btn-lg btn-block" />

                                            </div>
                                        </div>



                                    </div>
                                </div>

                                <!--Validation Script-->
                                <script>

                                    // Number validation function
                                    function validateNumber(input) {
                                        if (isNaN(Number(input.value))) {
                                            alert('Please enter a number');
                                            input.value = '';
                                        }
                                    }

                                    // Get elements
                                    const cID = document.querySelector('#cIDEdit');
                                    const prev_Reading = document.querySelector('#prev_ReadingEdit');
                                    const cur_Reading = document.querySelector('#cur_ReadingEdit');

                                    // Attach listeners


                                    cID.addEventListener('blur', () => {
                                        validateNumber(cID);
                                    });

                                    prev_Reading.addEventListener('input', () => {
                                        validateNumber(prev_Reading);
                                    });

                                    cur_Reading.addEventListener('blur', () => {
                                        validateNumber(cur_Reading);
                                    });


                                    $(document).ready(function () {
                                        $('#reading_ValueEdit, #cur_ReadingEdit, #prev_ReadingEdit').on('input', function () {
                                            var cur_Reading = parseFloat($('#cur_ReadingEdit').val());
                                            var prev_Reading = parseFloat($('#prev_ReadingEdit').val());
                                            var rDate = ($('#rDateEdit').val());

                                            var calculatedReading = isNaN(cur_Reading) || isNaN(prev_Reading) ? '' : (cur_Reading - prev_Reading).toFixed(2);
                                            $('#reading_ValueEdit').val(calculatedReading); // Update the readonly reading_Value field

                                            if (cur_Reading < prev_Reading) {
                                                window.alert('Current Reading Must be Greater Than Previous Reading')
                                            }

                                        });


                                    });
                                </script>

                                <!--Date Validation Script-->
                                <script>
                                    $(document).ready(function () {
                                        $("#rDateEdit").blur(function () {
                                            var enteredDate = new Date($(this).val());
                                            var currentDate = new Date();
                                            var lastDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);
                                            var minDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), 25);

                                            if (enteredDate < minDate || enteredDate > lastDayOfMonth) {
                                                alert("Enter a date between the 25th and the last day of the month.");
                                                // Clear the input field
                                                $(this).val('');
                                            }
                                        });
                                    });
                                </script>

                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!--Delete Invoice Modal-->
    <div class="modal fade" id="deleteInvoiceModal" data-backdrop="static" data-keyboard="false" tabindex="-1" aria-labelledby="createInvoiceModalLabel" aria-hidden="true" style="color:black">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title" id="createInvoiceModalLabel"> <strong>Delete Invoice</strong></h3>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="card rounded shadow">
                        <div class="card-body">
                            @using (Html.BeginForm("Delete", "Invoice", FormMethod.Post))
                            {
                                @Html.AntiForgeryToken()
                                @Html.HiddenFor(model => model.invoiceID, new { id = "invoiceID" })

                                <div class="card shadow-2-strong card-registration" style="border-radius: 15px;">

                                    <div class="card-body p-4 p-md-5">
                                        <h2 class="mb-4 pb-2 pb-md-0 mb-md-5"><strong>Delete Invoice</strong></h2>
                                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                                        <div class="row">
                                            <div class="col-md-6 mb-4">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(m => m.cID)
                                                    @Html.EditorFor(model => model.cID, new { htmlAttributes = new { @class = "form-control form-control-lg", @readonly = "readonly", id = "cIDDelete" } })
                                                    @Html.ValidationMessageFor(model => model.cID, "", new { @class = "text-danger" })
                                                </div>

                                            </div>

                                            <div class="col-md-6 mb-4">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(m => m.reading_Value)
                                                    @Html.EditorFor(model => model.reading_Value, new { htmlAttributes = new { @class = "form-control form-control-lg", id = "reading_ValueDelete", @readonly = "readonly" } })
                                                    @Html.ValidationMessageFor(model => model.reading_Value, "", new { @class = "text-danger" })
                                                </div>

                                            </div>

                                        </div>

                                        <div class="row">
                                            <div class="col-md-6 mb-4">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(m => m.prev_Reading)
                                                    @Html.EditorFor(model => model.prev_Reading, new { htmlAttributes = new { @class = "form-control form-control-lg", id = "prev_ReadingDelete", @readonly = "readonly" } })
                                                    @Html.ValidationMessageFor(model => model.prev_Reading, "", new { @class = "text-danger" })
                                                </div>

                                            </div>
                                            <div class="col-md-6 mb-4">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(model => model.cur_Reading)
                                                    @Html.EditorFor(model => model.cur_Reading, new { htmlAttributes = new { @class = "form-control form-control-lg", id = "cur_ReadingDelete", @readonly = "readonly" } })
                                                    @Html.ValidationMessageFor(model => model.cur_Reading, "", new { @class = "text-danger" })
                                                </div>

                                            </div>
                                        </div>

                                        <div class="row">
                                            <div class="col-md-6 mb-4 pb-2">
                                                <button type="submit" class="btn btn-danger btn-lg btn-block">Delete</button>
                                            </div>
                                        </div>
                                    </div>

                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!--Index: DataTable-->
    <div class="container">
        <table id="myTable" class="table table-striped table-bordered" style="width:100%">
            <thead>
                <tr>
                    <th>Invoice ID</th>
                    <th>Customer ID</th>
                    <th>Previous Reading</th>
                    <th>Current Reading</th>
                    <th>Reading Date</th>
                    <th>Rate ($)</th>
                    <th>Usage (KwH)</th>
                    <th>Total Amount ($)</th>
                    <th>Actions</th>

                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.invoiceList)
                {
                    <tr>

                        <td>@Html.DisplayFor(model => item.invoiceID)</td>
                        <td>@Html.DisplayFor(model => item.cID)</td>
                        <td>@Html.DisplayFor(model => item.prev_Reading)</td>
                        <td>@Html.DisplayFor(model => item.cur_Reading)</td>
                        <td>@(item.reading_Date.Date.ToString("d"))</td>
                        <td>@Html.DisplayFor(model => item.Rate)</td>
                        <td>@Html.DisplayFor(model => item.reading_Value)</td>
                        <td>@Html.DisplayFor(model => item.total_Fee)</td>
                        <td>

                            <a href="#" data-toggle="modal" data-target="#updateInvoiceModal" id="@item.invoiceID">
                                <i class="fa-solid fa-square-pen fa-1x" style="color: #1ABC9C;"></i>
                            </a>

                            <a href="#" data-toggle="modal" data-target="#deleteInvoiceModal" id="@item.invoiceID">
                                <i class="fas fa-trash fa-1x delete-icon item" style="color: #FF5733"></i>
                            </a>

                            <a href="@Url.Action("CustomerBill", "Invoice", new { id = item.invoiceID })">
                                <i class="fa-solid fa-file-pdf fa-1x" style="color: navy"></i>
                            </a>

                        </td>

                    </tr>
                }


            </tbody>
        </table>
    </div>


    <!--DataTable Script-->
    <script>
        new DataTable('#myTable');
    </script>

    <!--Invoice Data Fetching Script (Update)-->
    <script>

                        console.log('I am being reached');

                            $(document).ready(function () {
                                $("a[data-toggle='modal']").click(function () {
                                    var invoiceID = $(this).attr("id");
                                $.ajax({
                            url: '@Url.Action("GetInvoiceData", "Invoice")',
                            type: 'POST',
                            data: { id: invoiceID },
                            success: function (data) {
                                // Populate the form fields with the retrieved data
                                $("#invoiceID").val(invoiceID);
                                $("#cIDEdit").val(data.cID);
                                $("#rDateEdit").val(data.reading_Date);
                                $("#prev_ReadingEdit").val(data.prev_Reading);
                                $("#cur_ReadingEdit").val(data.cur_Reading);
                                $("#reading_ValueEdit").val(data.reading_Value);

                            },
                            error: function () {
                                alert("Error fetching invoice data.");
                            }
                        });
                    });
                });
    </script>

    <!--Getting Invoice Related Data Script-->
    <script>

                        console.log('I am being reached');

                            $(document).ready(function () {
                            $("#cID").blur(function () {
                            var customerID = $(this).val();

                        $.ajax({
                            url: '@Url.Action("GetRelatedData", "Invoice")',
                            type: 'POST',
                            data: { id: customerID },
                            success: function (data) {
                                // Populate the form fields with the retrieved data
                                $("#prev_Reading").val(data.cur_Reading);

                            },
                            error: function () {
                                alert("Error fetching user profile data.");
                            }
                        });
                    });
                });
    </script>

    <!--Validation For Date In Invoices-->
    <script>
        $(document).ready(function () {
            $("#rDate").blur(function () {
                var enteredDate = new Date($(this).val());
                var currentDate = new Date();
                var lastDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);
                var minDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), 25);

                if (enteredDate < minDate || enteredDate > lastDayOfMonth) {
                    alert("Enter a date between the 25th and the last day of the month.");
                    // Clear the input field
                    $(this).val('');
                }
            });
        });
    </script>

    <!--Fields Data Checker Script-->
  

    <!--Update Invoice Script-->
    <script>
    $(document).ready(function () {
        $("#updateForm").submit(function (e) {
            e.preventDefault(); // Prevent the default form submission

            var formData = $(this).serialize(); // Serialize form data

            $.ajax({
                type: "POST",
                url: "@Url.Action("UpdateInvoice", "Invoice")", 
                data: formData,
                success: function (response) {
                    if (response.success) {
                        alert(response.message);
                        location.reload();
                    } else {
                        alert("Failed to update invoice!.");
                    }
                },
                error: function () {
                    alert("An error occurred while updating the invoice.");
                }
            });
        });
    });
    </script>

    <!--Invoice Data Fetching Script (Delete)-->
    <script>

                        console.log('I am being reached');

                            $(document).ready(function () {
                                $("a[data-toggle='modal']").click(function () {
                                     window.invID = $(this).attr("id");
                                $.ajax({
                            url: '@Url.Action("GetInvoiceData", "Invoice")',
                            type: 'POST',
                            data: { id: invID },
                            success: function (data) {
                                // Populate the form fields with the retrieved data
                                $("#invoiceID").val(invID)
                                $("#cIDDelete").val(data.cID);
                                $("#rDateDelete").val(data.reading_Date);
                                $("#prev_ReadingDelete").val(data.prev_Reading);
                                $("#cur_ReadingDelete").val(data.cur_Reading);
                                $("#reading_ValueDelete").val(data.reading_Value);

                            },
                            error: function () {
                                alert("Error fetching invoice data.");
                            }
                        });
                    });
                });
    </script>

    <!--Delete Invoice Script-->
    <!-- Second Script: Delete Invoice Script -->
    <script>
    console.log('I am being reached');

    // Function to handle the delete operation
    function handleDeleteClick() {
        // Access the global variable window.invID
        var invID = window.invID;

        $.ajax({
            url: '@Url.Action("Delete", "Invoice")',
            type: 'POST',
            data: { id: invID },
            success: function (response) {
                if (response.success) {
                    alert(response.message);
                    location.reload();
                } else {
                    alert("Failed to delete invoice!.");
                }
            },
            error: function () {
                alert("An error occurred while updating the invoice.");
            }
        });
    }

    $(document).ready(function () {
        $("button[type='submit']").click(function (e) {
            e.preventDefault(); // Prevent the default form submission

            // Call the function to handle the delete operation
            handleDeleteClick();
        });
    });
    </script>

</body>
</html>