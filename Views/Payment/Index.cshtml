
@model EBS.viewModels.payWrapper

@{
    ViewBag.Title = "Invoices | SEC";
    Layout = "~/Views/Shared/_Layout2.cshtml";
}

<!DOCTYPE html>

<html>
<head>

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" />

    <!-- jQuery -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

    <!-- DataTables -->
    <script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.6/js/dataTables.bootstrap4.min.js"></script>

    <!-- Bootstrap -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.5.2/css/bootstrap.css" rel="stylesheet" />
    <link href="https://cdn.datatables.net/1.13.6/css/dataTables.bootstrap4.min.css" rel="stylesheet" />

    <style>
        .content {
            display: flex;
            justify-content: center;
            padding: 20px; /* Add padding around the table */
        }

        .table-container {
            max-width: 700px; /* Set a maximum width for the table container */
            width: 10%;
            padding-top: 20px;
        }
        .table thead th {
            white-space: nowrap; /* Prevent text wrapping */
        }
        .container {
            margin-left:100px;
           
            padding-top: 30px;
            padding-left: 45px;
            padding-bottom: 20px;
        }
    </style>

    <title>Payments | SEC</title>


</head>
<body>
    <!--Payment Breadcrumb-->
    <ol class="breadcrumb" style="margin-left:130px;">
        <li class="breadcrumb-item">SEC</li>
        <li class="breadcrumb-item"><a href="#">Payments</a></li>
    </ol>

    <!--Pay History Generator-->
    <div class="mt-4 pt-2" style="padding-left: 40px; margin-left:100px;">
        <form action="@Url.Action("BulkInsert", "Payment")" method="get">
            <input class="btn btn-secondary btn-lg btn-block" type="submit" value="Bulk Insert" />
        </form>
    </div>

    <!--Modal Activation Button-->
    <div class="mt-4 pt-2" style="padding-left: 40px; margin-left: 100px;">

        <input data-toggle="modal" data-target="#recordPaymenyModal" class="btn btn-primary btn-lg btn-block" type="submit" value="Record Payment" />

    </div>

    <!--Record Payment Modal-->
    <div class="modal fade" id="recordPaymenyModal" data-backdrop="static" data-keyboard="false" tabindex="-1" aria-labelledby="createInvoiceModalLabel" aria-hidden="true" style="color:black">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title" id="createInvoiceModalLabel"> <strong>Record Payment</strong></h3>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="card rounded shadow">
                        <div class="card-body">
                            @using (Html.BeginForm("Create", "Payment", FormMethod.Post))
                            {
                                @Html.AntiForgeryToken()

                                <div class="card shadow-2-strong card-registration" style="border-radius: 15px;">

                                    <div class="card-body p-4 p-md-5">
                                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                                        <div class="row">
                                            <div class="col-md-6 mb-4">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(model => model.invoiceID)
                                                    @Html.EditorFor(model => model.invoiceID, new { htmlAttributes = new { @class = "form-control form-control-lg", id = "invoiceID" } })
                                                    @Html.ValidationMessageFor(model => model.invoiceID, "", new { @class = "text-danger" })
                                                </div>

                                            </div>
                                            <div class="col-md-6 mb-4">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(m => m.cID)
                                                    @Html.EditorFor(model => model.cID, new { htmlAttributes = new { @class = "form-control form-control-lg", id = "cID" } })
                                                    @Html.ValidationMessageFor(model => model.cID, "", new { @class = "text-danger" })
                                                </div>

                                            </div>
                                        </div>

                                        <div class="row">
                                            <div class="col-md-6 mb-4">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(m => m.paidAmount)
                                                    @Html.EditorFor(model => model.paidAmount, new { htmlAttributes = new { @class = "form-control form-control-lg", id = "paidAmount" } })
                                                    @Html.ValidationMessageFor(model => model.paidAmount, "", new { @class = "text-danger" })
                                                </div>

                                            </div>
                                            <div class="col-md-6 mb-4">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(model => model.totalFee)
                                                    @Html.EditorFor(model => model.totalFee, new { htmlAttributes = new { @class = "form-control form-control-lg", id = "totalFee" } })
                                                    @Html.ValidationMessageFor(model => model.totalFee, "", new { @class = "text-danger" })
                                                </div>

                                            </div>
                                        </div>

                                        <div class="row">
                                            <div class="col-md-6 mb-4">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(m => m.payMethod)
                                                    @Html.EditorFor(model => model.payMethod, new { htmlAttributes = new { @class = "form-control form-control-lg", id = "payMethod" } })
                                                    @Html.ValidationMessageFor(model => model.payMethod, "", new { @class = "text-danger" })
                                                </div>

                                            </div>
                                            <div class="col-md-6 mb-4">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(m => m.payDate)
                                                    @Html.EditorFor(model => model.payDate, new { htmlAttributes = new { @class = "form-control form-control-lg", type = "date" } })
                                                    @Html.ValidationMessageFor(model => model.payDate, "", new { @class = "text-danger" })
                                                </div>

                                            </div>
                                        </div>

                                        <div class="row">
                                            <div class="col-md-6 mb-4 pb-2">
                                                <input type="submit" value="Create" class="btn btn-success btn-lg btn-block" />

                                            </div>


                                        </div>

                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!--Update Payment Modal-->
    <div class="modal fade" id="updatePaymenyModal" data-backdrop="static" data-keyboard="false" tabindex="-1" aria-labelledby="createInvoiceModalLabel" aria-hidden="true" style="color:black">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title" id="createInvoiceModalLabel"> <strong>Update Payment</strong></h3>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="card rounded shadow">
                        <div class="card-body">
                            @using (Html.BeginForm("UpdatePayment", "Payment", FormMethod.Post, new { id = "updatePaymentForm" }))
                            {
                                @Html.AntiForgeryToken()
                                @Html.HiddenFor(model => model.payID, new { id = "payIDUpdate" })

                                <div class="card shadow-2-strong card-registration" style="border-radius: 15px;">

                                    <div class="card-body p-4 p-md-5">
                                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                                        <div class="row">
                                            <div class="col-md-6 mb-4">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(model => model.invoiceID)
                                                    @Html.EditorFor(model => model.invoiceID, new { htmlAttributes = new { @class = "form-control form-control-lg", id = "invoiceIDUpdate" } })
                                                    @Html.ValidationMessageFor(model => model.invoiceID, "", new { @class = "text-danger" })
                                                </div>

                                            </div>
                                            <div class="col-md-6 mb-4">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(m => m.cID)
                                                    @Html.EditorFor(model => model.cID, new { htmlAttributes = new { @class = "form-control form-control-lg", id = "cIDUpdate" } })
                                                    @Html.ValidationMessageFor(model => model.cID, "", new { @class = "text-danger" })
                                                </div>

                                            </div>
                                        </div>

                                        <div class="row">
                                            <div class="col-md-6 mb-4">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(m => m.paidAmount)
                                                    @Html.EditorFor(model => model.paidAmount, new { htmlAttributes = new { @class = "form-control form-control-lg", id = "paidAmountUpdate" } })
                                                    @Html.ValidationMessageFor(model => model.paidAmount, "", new { @class = "text-danger" })
                                                </div>

                                            </div>
                                            <div class="col-md-6 mb-4">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(model => model.totalFee)
                                                    @Html.EditorFor(model => model.totalFee, new { htmlAttributes = new { @class = "form-control form-control-lg", id = "totalFeeUpdate" } })
                                                    @Html.ValidationMessageFor(model => model.totalFee, "", new { @class = "text-danger" })
                                                </div>

                                            </div>
                                        </div>

                                        <div class="row">
                                            <div class="col-md-6 mb-4">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(m => m.payMethod)
                                                    @Html.EditorFor(model => model.payMethod, new { htmlAttributes = new { @class = "form-control form-control-lg", id = "payMethodUpdate" } })
                                                    @Html.ValidationMessageFor(model => model.payMethod, "", new { @class = "text-danger" })
                                                </div>

                                            </div>
                                            <div class="col-md-6 mb-4">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(m => m.payDate)
                                                    @Html.EditorFor(model => model.payDate, new { htmlAttributes = new { @class = "form-control form-control-lg", id = "payDateUpdate", type = "date" } })
                                                    @Html.ValidationMessageFor(model => model.payDate, "", new { @class = "text-danger" })
                                                </div>

                                            </div>
                                        </div>

                                        <div class="row">
                                            <div class="col-md-6 mb-4 pb-2">
                                                <input type="submit" value="Update" class="btn btn-primary btn-lg btn-block" />

                                            </div>
                                        </div>

                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!--Delete Payment Modal-->
    <div class="modal fade" id="deletePaymenyModal" data-backdrop="static" data-keyboard="false" tabindex="-1" aria-labelledby="createInvoiceModalLabel" aria-hidden="true" style="color:black">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title" id="createInvoiceModalLabel"> <strong>Delete Payment</strong></h3>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="card rounded shadow">
                        <div class="card-body">
                            @using (Html.BeginForm("Delete", "Payment", FormMethod.Post))
                            {
                                @Html.AntiForgeryToken()
                                @Html.HiddenFor(model => model.payID, new { id = "payIDDelete" })

                                <div class="card shadow-2-strong card-registration" style="border-radius: 15px;">

                                    <div class="card-body p-4 p-md-5">
                                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                                        <div class="row">
                                            <div class="col-md-6 mb-4">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(model => model.invoiceID)
                                                    @Html.EditorFor(model => model.invoiceID, new { htmlAttributes = new { @class = "form-control form-control-lg", id = "invoiceIDDelete", @readonly = "readonly" } })
                                                    @Html.ValidationMessageFor(model => model.invoiceID, "", new { @class = "text-danger" })
                                                </div>

                                            </div>
                                            <div class="col-md-6 mb-4">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(m => m.cID)
                                                    @Html.EditorFor(model => model.cID, new { htmlAttributes = new { @class = "form-control form-control-lg", id = "cIDDelete", @readonly = "readonly" } })
                                                    @Html.ValidationMessageFor(model => model.cID, "", new { @class = "text-danger" })
                                                </div>

                                            </div>
                                        </div>

                                        <div class="row">
                                            <div class="col-md-6 mb-4">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(m => m.paidAmount)
                                                    @Html.EditorFor(model => model.paidAmount, new { htmlAttributes = new { @class = "form-control form-control-lg", id = "paidAmountDelete", @readonly = "readonly" } })
                                                    @Html.ValidationMessageFor(model => model.paidAmount, "", new { @class = "text-danger" })
                                                </div>

                                            </div>
                                            <div class="col-md-6 mb-4">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(model => model.totalFee)
                                                    @Html.EditorFor(model => model.totalFee, new { htmlAttributes = new { @class = "form-control form-control-lg", id = "totalFeeDelete", @readonly = "readonly" } })
                                                    @Html.ValidationMessageFor(model => model.totalFee, "", new { @class = "text-danger" })
                                                </div>

                                            </div>
                                        </div>

                                        <div class="row">
                                            <div class="col-md-6 mb-4">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(m => m.payMethod)
                                                    @Html.EditorFor(model => model.payMethod, new { htmlAttributes = new { @class = "form-control form-control-lg", id = "payMethodDelete", @readonly = "readonly" } })
                                                    @Html.ValidationMessageFor(model => model.payMethod, "", new { @class = "text-danger" })
                                                </div>

                                            </div>

                                        </div>

                                        <div class="row">
                                            <div class="col-md-6 mb-4 pb-2">
                                                <button type="submit" value="Delete" class="btn btn-danger btn-lg btn-block">Delete</button>
                                            </div>

                                        </div>

                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!--Index: DataTable-->
    <div class="container">
        <table id="myTable" class="table table-striped table-bordered" style="width:100%">
            <thead>
                <tr>
                    <th>Payment ID</th>
                    <th>Customer ID</th>
                    <th>Invoice ID</th>
                    <th>Payment Amount ($)</th>
                    <th>Total Fee ($)</th>
                    <th>Payment Method</th>
                    <th>Payment Date</th>
                    <th>Actions</th>


                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.pay)
                {
                    <tr>

                        <td>@Html.DisplayFor(model => item.payID)</td>
                        <td>@Html.DisplayFor(model => item.cID)</td>
                        <td>@Html.DisplayFor(model => item.invoiceID)</td>
                        <td>@Html.DisplayFor(model => item.paidAmount)</td>
                        <td>@Html.DisplayFor(model => item.totalFee)</td>
                        <td>@Html.DisplayFor(model => item.payMethod)</td>
                        <td>@(item.payDate.Date.ToString("d"))</td>
                        <td>
                            <a href="#" data-toggle="modal" data-target="#updatePaymenyModal" id="@item.payID">
                                <i class="fa-solid fa-square-pen fa-1x" style="color: #1ABC9C;"></i>
                            </a>

                            <a href="#" data-toggle="modal" data-target="#deletePaymenyModal" id="@item.payID">
                                <i class="fas fa-trash fa-1x delete-icon item" style="color: #FF5733"></i>
                            </a>

                            <a href="@Url.Action("Receipt", "Payment", new { id = item.cID })">
                                <i class="fa-solid fa-file-pdf fa-1x" style="color: navy"></i>
                            </a>

                        </td>
                    </tr>
                }



            </tbody>
        </table>
    </div>

    <!--DataTable Script-->
    <script>
        new DataTable('#myTable');
    </script>

    <!--Create Validation Script-->
    <script>

        // Text validation function
        function validateText(input) {
            if (!isNaN(Number(input.value))) {
                alert('Please enter text');
                input.value = '';
            }
        }

        // Number validation function
        function validateNumber(input) {
            if (isNaN(Number(input.value))) {
                alert('Please enter a number');
                input.value = '';
            }
        }

        // Get elements
        const cID = document.querySelector('#cID');
        const invoiceID = document.querySelector('#invoiceID');
        const paidAmount = document.querySelector('#paidAmount');
        const totalFee = document.querySelector('#totalFee');
        const payMethod = document.querySelector('#payMethod');

        // Attach listeners
        cID.addEventListener('input', () => {
            validateNumber(cID);
        });

        invoiceID.addEventListener('input', () => {
            validateNumber(invoiceID);
        });

        paidAmount.addEventListener('input', () => {
            validateNumber(paidAmount);
        });

        totalFee.addEventListener('input', () => {
            validateNumber(totalFee);
        });

        payMethod.addEventListener('input', () => {
            validateText(payMethod);
        });


    </script>

    <!--Getting Invoice Related Data Script-->
    <script>

                        console.log('I am being reached');

                            $(document).ready(function () {
                            $("#invoiceID").blur(function () {
                            var invoiceID = $(this).val();

                        $.ajax({
                            url: '@Url.Action("GetRelatedData", "Payment")',
                            type: 'POST',
                            data: { id: invoiceID },
                            success: function (data) {
                                // Populate the form fields with the retrieved data
                                $("#cID").val(data.cID);
                                $("#totalFee").val(data.totalFee);

                            },
                            error: function () {
                                alert("Error fetching Invoice data.");
                            }
                        });
                    });
                });
    </script>

    <!--Fetching Payment Data For Updating-->
    <script>

                        console.log('I am being reached');

                            $(document).ready(function () {
                                $("a[data-toggle='modal']").click(function () {
                                    var payID = $(this).attr("id");
                                $.ajax({
                            url: '@Url.Action("GetPaymentData", "Payment")',
                            type: 'POST',
                            data: { id: payID },
                            success: function (data) {
                                // Populate the form fields with the retrieved data
                                $("#payIDUpdate").val(payID);
                                $("#invoiceIDUpdate").val(data.invoiceID);
                                $("#cIDUpdate").val(data.cID);
                                $("#paidAmountUpdate").val(data.paidAmount);
                                $("#totalFeeUpdate").val(data.totalFee);
                                $("#payMethodUpdate").val(data.payMethod);
                                $("#dateUpdate").val(data.payDate);

                            },
                            error: function () {
                                alert("Error fetching payment data.");
                            }
                        });
                    });
                });
    </script>

    <!--Update Payment Script-->
    <script>
    $(document).ready(function () {
        $("#updatePaymentForm").submit(function (e) {
            e.preventDefault(); // Prevent the default form submission

            var formData = $(this).serialize(); // Serialize form data

            $.ajax({
                type: "POST",
                url: "@Url.Action("UpdatePayment", "Payment")",
                data: formData,
                success: function (response) {
                    if (response.success) {
                        alert(response.message);
                        location.reload();
                    } else {
                        alert("Failed to update payment!.");
                    }
                },
                error: function () {
                    alert("An error occurred while updating the payment.");
                }
            });
        });
    });
    </script>

    <!--Fetching Payment Data For Deletion-->
    <script>

                        console.log('I am being reached');

                            $(document).ready(function () {
                                $("a[data-toggle='modal']").click(function () {
                                     window.payID = $(this).attr("id");
                                $.ajax({
                            url: '@Url.Action("GetPaymentData", "Payment")',
                            type: 'POST',
                            data: { id: payID },
                            success: function (data) {
                                // Populate the form fields with the retrieved data
                                $("#payIDDelete").val(payID);
                                $("#invoiceIDDelete").val(data.invoiceID);
                                $("#cIDDelete").val(data.cID);
                                $("#paidAmountDelete").val(data.paidAmount);
                                $("#totalFeeDelete").val(data.totalFee);
                                $("#payMethodDelete").val(data.payMethod);
                                $("#dateDelete").val(data.payDate);

                            },
                            error: function () {
                                alert("Error fetching payment data.");
                            }
                        });
                    });
                });
    </script>

    <!--Delete Payment Script -->
    <script>
    console.log('I am being reached');

    // Function to handle the delete operation
    function handleDeleteClick() {
        // Access the global variable window.invID
        var payid = window.payID;

        $.ajax({
            url: '@Url.Action("Delete", "Payment")',
            type: 'POST',
            data: { id: payid },
            success: function (response) {
                if (response.success) {
                    alert(response.message);
                    location.reload();
                } else {
                    alert("Failed to delete payment!.");
                }
            },
            error: function () {
                alert("An error occurred while deleting the payment.");
            }
        });
    }

    $(document).ready(function () {
        $("button[type='submit']").click(function (e) {
            e.preventDefault(); // Prevent the default form submission

            // Call the function to handle the delete operation
            handleDeleteClick();
        });
    });
    </script>

</body>
</html>
