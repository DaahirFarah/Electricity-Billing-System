
@model EBS.viewModels.rateWrapper

@{
    Layout = "~/Views/Shared/_Layout2.cshtml";

}

<!DOCTYPE html>

<html>
<head>

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" />
    <link href="~/Assets/modal.css" rel="stylesheet" />
    <!-- jQuery -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

    <!-- DataTables -->
    <script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.6/js/dataTables.bootstrap4.min.js"></script>

    <!-- Bootstrap -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.5.2/css/bootstrap.css" rel="stylesheet" />
    <link href="https://cdn.datatables.net/1.13.6/css/dataTables.bootstrap4.min.css" rel="stylesheet" />

    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">


    <style>
        .content {
            display: flex;
            justify-content: center;
            padding: 200px; /* Add padding around the table */
        }

        .table-container {
            max-width: 300px; /* Set a maximum width for the table container */
            width: 10%;
            padding-top: 20px;
        }

        .table thead th {
            white-space: nowrap; /* Prevent text wrapping */
        }

        .container {
            margin-left: 100px;
            padding-top: 30px;
            padding-left: 80px;
            padding-right: 20px;
            padding-bottom: 20px;
        }

        .modal-body {
            width: 100%;
        }
    </style>

    <title>Rates | SEC</title>


</head>
<body>

    <ol class="breadcrumb" style="margin-left:130px;">
        <li class="breadcrumb-item">SEC</li>
        <li class="breadcrumb-item"><a href="#">Rates</a></li>
    </ol>

    <!--Modal Activation Button-->
    <div class="mt-4 pt-2" style="padding-left: 75px; margin-left: 100px;">

        <input data-toggle="modal" data-target="#createRateModal" class="btn btn-primary btn-lg btn-block" type="submit" value="Add Rate" />

    </div>

    <div class="mt-4 pt-2" style="padding-left: 75px; margin-left: 100px;">
        <form action="@Url.Action("SpecialRatesIndex", "Rates")" method="get">
            <input class="btn btn-secondary btn-lg btn-block" type="submit" value="Special Rates" />
        </form>
    </div>

    <!--Create Meter Modal-->
    <div class="modal fade" id="createRateModal" data-backdrop="static" data-keyboard="false" tabindex="-1" aria-labelledby="createInvoiceModalLabel" aria-hidden="true" style="color:black">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title" id="createInvoiceModalLabel"> <strong>Create Rate</strong></h3>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="card rounded shadow">
                        <div class="card-body">
                            @using (Html.BeginForm("Create", "Rates", FormMethod.Post))
                            {
                                @Html.AntiForgeryToken()

                                <div class="card shadow-2-strong card-registration" style="border-radius: 15px;">

                                    <div class="card-body p-4 p-md-5">
                                        @*<h2 class="mb-4 pb-2 pb-md-0 mb-md-5"><strong>Create Invoice</strong></h2>*@
                                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                                        <div class="row">
                                            <div class="col-md-4 mb-4">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(m => m.UsageLevelName)
                                                    @Html.EditorFor(model => model.UsageLevelName, new { htmlAttributes = new { @class = "form-control form-control-lg", @id = "ulName" } })
                                                    @Html.ValidationMessageFor(model => model.UsageLevelName, "", new { @class = "text-danger" })
                                                </div>

                                            </div>
                                            <div class="col-md-4 mb-4">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(model => model.UsageLevelNumberStarts)
                                                    @Html.EditorFor(model => model.UsageLevelNumberStarts, new { htmlAttributes = new { @class = "form-control form-control-lg", @id = "ulNumber" } })
                                                    @Html.ValidationMessageFor(model => model.UsageLevelNumberStarts, "", new { @class = "text-danger" })
                                                </div>

                                            </div>

                                        </div>

                                        <div class="row">

                                            <div class="col-md-4 mb-4">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(model => model.UsageLevelNumberEnds)
                                                    @Html.EditorFor(model => model.UsageLevelNumberEnds, new { htmlAttributes = new { @class = "form-control form-control-lg", @id = "ulNumberEnds" } })
                                                    @Html.ValidationMessageFor(model => model.UsageLevelNumberEnds, "", new { @class = "text-danger" })
                                                </div>

                                            </div>

                                            <div class="col-md-4 mb-4">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(model => model.Rate)
                                                    @Html.EditorFor(model => model.Rate, new { htmlAttributes = new { @class = "form-control form-control-lg", @id = "rate" } })
                                                    @Html.ValidationMessageFor(model => model.Rate, "", new { @class = "text-danger" })
                                                </div>

                                            </div>

                                        </div>

                                        <!--Below div element holds some buttons. Leave it alone-->
                                        <div class="row">
                                            <div class="col-md-6 mb-4 pb-2">
                                                <input type="submit" value="Create" class="btn btn-success btn-lg btn-block" />

                                            </div>


                                        </div>

                                        <script>
                                            // Text validation function
                                            function validateText(input) {
                                                if (!isNaN(Number(input.value))) {
                                                    alert('Please enter text');
                                                    input.value = '';
                                                }
                                            }

                                            // Number validation function
                                            function validateNumber(input) {
                                                if (isNaN(Number(input.value))) {
                                                    alert('Please enter a number');
                                                    input.value = '';
                                                }
                                            }

                                            // Get elements
                                            const ulName = document.querySelector('#ulName');
                                            const ulNumber = document.querySelector('#ulNumber');
                                            const Rate = document.querySelector('#rate');


                                            // Attach listeners
                                            ulName.addEventListener('input', () => {
                                                validateText(ulName);
                                            });

                                            ulNumber.addEventListener('input', () => {
                                                validateNumber(ulNumber);
                                            });

                                            Rate.addEventListener('input', () => {
                                                validateNumber(Rate);
                                            });

                                        </script>

                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!--Update Meter Modal-->
    <div class="modal fade" id="updateRateModal" data-backdrop="static" data-keyboard="false" tabindex="-1" aria-labelledby="createInvoiceModalLabel" aria-hidden="true" style="color:black">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title" id="createInvoiceModalLabel"> <strong>Update Rate</strong></h3>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="card rounded shadow">
                        <div class="card-body">
                            @using (Html.BeginForm("UpdateRate", "Rates", FormMethod.Post, new { id = "updateRateForm" }))
                            {
                                @Html.AntiForgeryToken()
                                @Html.HiddenFor(model => model.Id, new { id = "updateID" })

                                <div class="card shadow-2-strong card-registration" style="border-radius: 15px;">

                                    <div class="card-body p-4 p-md-5">
                                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                                        <div class="row">
                                            <div class="col-md-4 mb-4">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(m => m.UsageLevelName)
                                                    @Html.EditorFor(model => model.UsageLevelName, new { htmlAttributes = new { @class = "form-control form-control-lg", @id = "ulNameUpdate" } })
                                                    @Html.ValidationMessageFor(model => model.UsageLevelName, "", new { @class = "text-danger" })
                                                </div>

                                            </div>
                                            <div class="col-md-4 mb-4">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(model => model.UsageLevelNumberStarts)
                                                    @Html.EditorFor(model => model.UsageLevelNumberStarts, new { htmlAttributes = new { @class = "form-control form-control-lg", @id = "ulNumberUpdate" } })
                                                    @Html.ValidationMessageFor(model => model.UsageLevelNumberStarts, "", new { @class = "text-danger" })
                                                </div>

                                            </div>

                                        </div>

                                        <div class="row">

                                            <div class="col-md-4 mb-4">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(model => model.UsageLevelNumberEnds)
                                                    @Html.EditorFor(model => model.UsageLevelNumberEnds, new { htmlAttributes = new { @class = "form-control form-control-lg", @id = "ulNumberEndsUpdate" } })
                                                    @Html.ValidationMessageFor(model => model.UsageLevelNumberEnds, "", new { @class = "text-danger" })
                                                </div>

                                            </div>

                                            <div class="col-md-4 mb-4">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(model => model.Rate)
                                                    @Html.EditorFor(model => model.Rate, new { htmlAttributes = new { @class = "form-control form-control-lg", @id = "rateUpdate" } })
                                                    @Html.ValidationMessageFor(model => model.Rate, "", new { @class = "text-danger" })
                                                </div>

                                            </div>

                                        </div>

                                        <!--Below div element holds some buttons. Leave it alone-->
                                        <div class="row">
                                            <div class="col-md-6 mb-4 pb-2">
                                                <input type="submit" value="Update" class="btn btn-success btn-lg btn-block" />

                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!--Delete Meter Modal-->
    <div class="modal fade" id="deleteRateModal" data-backdrop="static" data-keyboard="false" tabindex="-1" aria-labelledby="createInvoiceModalLabel" aria-hidden="true" style="color:black">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title" id="createInvoiceModalLabel"> <strong>Delete Rate</strong></h3>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="card rounded shadow">
                        <div class="card-body">
                            @using (Html.BeginForm("Delete", "Rates", FormMethod.Post))
                            {
                                @Html.AntiForgeryToken()
                                @Html.HiddenFor(model => model.Id, new { id = "DeleteID" })

                                <div class="card shadow-2-strong card-registration" style="border-radius: 15px;">

                                    <div class="card-body p-4 p-md-5">
                                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                                        <div class="row">
                                            <div class="col-md-4 mb-4">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(m => m.UsageLevelName)
                                                    @Html.EditorFor(model => model.UsageLevelName, new { htmlAttributes = new { @class = "form-control form-control-lg", @id = "ulNameDelete", @readonly = "readonly" } })
                                                    @Html.ValidationMessageFor(model => model.UsageLevelName, "", new { @class = "text-danger" })
                                                </div>

                                            </div>
                                            <div class="col-md-4 mb-4">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(model => model.UsageLevelNumberStarts)
                                                    @Html.EditorFor(model => model.UsageLevelNumberStarts, new { htmlAttributes = new { @class = "form-control form-control-lg", @id = "ulNumberUpdate", @readonly = "readonly" } })
                                                    @Html.ValidationMessageFor(model => model.UsageLevelNumberStarts, "", new { @class = "text-danger" })
                                                </div>

                                            </div>

                                        </div>

                                        <div class="row">
                                            <div class="col-md-4 mb-4">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(model => model.UsageLevelNumberEnds)
                                                    @Html.EditorFor(model => model.UsageLevelNumberEnds, new { htmlAttributes = new { @class = "form-control form-control-lg", @id = "ulNumberEndsDelete", @readonly = "readonly" } })
                                                    @Html.ValidationMessageFor(model => model.UsageLevelNumberEnds, "", new { @class = "text-danger" })
                                                </div>

                                            </div>

                                            <div class="col-md-4 mb-4">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(model => model.Rate)
                                                    @Html.EditorFor(model => model.Rate, new { htmlAttributes = new { @class = "form-control form-control-lg", @id = "rateUpdate", @readonly = "readonly" } })
                                                    @Html.ValidationMessageFor(model => model.Rate, "", new { @class = "text-danger" })
                                                </div>

                                            </div>

                                        </div>

                                        <!--Below div element holds some buttons. Leave it alone-->
                                        <div class="row">
                                            <div class="col-md-6 mb-4 pb-2">
                                                <button type="submit" class="btn btn-danger btn-lg btn-block">Delete</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!--Index: DataTable-->
    <div class="container">
        <table id="myTable" class="table table-striped table-bordered" style="width:100%">
            <thead>
                <tr>
                    <th>Rate ID</th>
                    <th>Usage Level Name</th>
                    <th>Usage Level Range Starts (Kw/H)</th>
                    <th>Usage Level Range Ends (Kw/H)</th>
                    <th>Rate</th>
                    <th>Actions</th>

                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.rateList)
                {
                    <tr>

                        <td>@Html.DisplayFor(model => item.Id)</td>
                        <td>@Html.DisplayFor(model => item.UsageLevelName)</td>
                        <td>@Html.DisplayFor(model => item.UsageLevelNumberStarts)</td>
                        <td>@Html.DisplayFor(model => item.UsageLevelNumberEnds)</td>
                        <td>@Html.DisplayFor(model => item.Rate)</td>
                        <td>

                            <a href="#" data-toggle="modal" data-target="#updateRateModal" id="@item.Id">
                                <i class="fa-solid fa-square-pen fa-2x" style="color: #1ABC9C;"></i>
                            </a>

                            <a href="#" data-toggle="modal" data-target="#deleteRateModal" id="@item.Id">
                                <i class="fas fa-trash fa-2x delete-icon item" style="color: #FF5733"></i>
                            </a>


                        </td>

                    </tr>
                }


            </tbody>
        </table>
    </div>


    <script>
        new DataTable('#myTable');
    </script>

    <!--Fetch Data For Update-->
    <script>

                        console.log('I am being reached');

                            $(document).ready(function () {
                                $("a[data-toggle='modal']").click(function () {
                                    var RateID = $(this).attr("id");
                                $.ajax({
                            url: '@Url.Action("GetRate", "Rates")',
                            type: 'POST',
                            data: { id: RateID },
                            success: function (data) {
                                // Populate the form fields with the retrieved data
                                $("#updateID").val(RateID);
                                $("#ulNameUpdate").val(data.UsageLevelName);
                                $("#ulNumberUpdate").val(data.UsageLevelNumberStarts);
                                $("#ulNumberEndsUpdate").val(data.UsageLevelNumberEnds);
                                $("#rateUpdate").val(data.Rate);


                            },
                            error: function () {
                                alert("Error fetching Rate data.");
                            }
                        });
                    });
                });
    </script>

    <!--Update Rate Script-->
    <script>
    $(document).ready(function () {
        $("#updateRateForm").submit(function (e) {
            e.preventDefault(); // Prevent the default form submission

            var formData = $(this).serialize(); // Serialize form data

            $.ajax({
                type: "POST",
                url: "@Url.Action("UpdateRate", "Rates")",
                data: formData,
                success: function (response) {
                    if (response.success) {
                        alert(response.message);
                        location.reload();
                    } else {
                        alert("Failed to update rate!.");
                    }
                },
                error: function () {
                    alert("An error occurred while updating the rate.");
                }
            });
        });
    });
    </script>

    <!--Fetch Data For Delete-->
    <script>

                        console.log('I am being reached');

                            $(document).ready(function () {
                                $("a[data-toggle='modal']").click(function () {
                                    window.RateID = $(this).attr("id");
                                $.ajax({
                            url: '@Url.Action("GetRate", "Rates")',
                            type: 'POST',
                            data: { id: RateID },
                            success: function (data) {
                                // Populate the form fields with the retrieved data
                                $("#DeleteID").val(RateID);
                                $("#ulNameDelete").val(data.UsageLevelName);
                                $("#ulNumberDelete").val(data.UsageLevelNumberStarts);
                                $("#ulNumberEndsDelete").val(data.UsageLevelNumberEnds);
                                $("#rateDelete").val(data.Rate);


                            },
                            error: function () {
                                alert("Error fetching Rate data.");
                            }
                        });
                    });
                });
    </script>

    <!--Delete Rate Script -->
    <script>
    console.log('I am being reached');

    // Function to handle the delete operation
    function handleDeleteClick() {
        // Access the global variable window.invID
        var invID = window.RateID;

        $.ajax({
            url: '@Url.Action("Delete", "Rates")',
            type: 'POST',
            data: { id: invID },
            success: function (response) {
                if (response.success) {
                    alert(response.message);
                    location.reload();
                } else {
                    alert("Failed to delete rate!.");
                }
            },
            error: function () {
                alert("An error occurred while updating the rate.");
            }
        });
    }

    $(document).ready(function () {
        $("button[type='submit']").click(function (e) {
            e.preventDefault(); // Prevent the default form submission

            // Call the function to handle the delete operation
            handleDeleteClick();
        });
    });
    </script>


</body>
</html>
