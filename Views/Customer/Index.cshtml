
@model EBS.viewModels.customerWrapper

@{
    ViewBag.Title = "Customers | SEC";
    Layout = "~/Views/Shared/_Layout2.cshtml";
}

<html>
<head>

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" />


    <!-- jQuery -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

    <!-- DataTables -->
    <script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.6/js/dataTables.bootstrap4.min.js"></script>

    <!-- Bootstrap -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.5.2/css/bootstrap.css" rel="stylesheet" />
    <link href="https://cdn.datatables.net/1.13.6/css/dataTables.bootstrap4.min.css" rel="stylesheet" />

    <title>Customers | SEC</title>
    <style>
        .content {
            display: flex;
            justify-content: center;
            padding: 20px; /* Add padding around the table */
        }

        .table-container {
            max-width: 700px; /* Set a maximum width for the table container */
            width: 10%;
            padding-top: 20px;
        }
        .table thead th {
            white-space: nowrap; /* Prevent text wrapping */
        }

        .container {
            margin-left:100px;
            padding-top: 30px;
            padding-left: 35px;
            padding-bottom: 20px;
        }

        </style>

    <title>Customers | SEC</title>


</head>
<body>

    <!--Breadcrump Code-->
    <ol class="breadcrumb" style="margin-left:130px;">
        <li class="breadcrumb-item">SEC</li>
        <li class="breadcrumb-item"><a href="#">Customers</a></li>
    </ol>

    <!--Generate List Button-->
    <div class="mt-4 pt-2" style="padding-left: 40px; margin-left:100px">
        <form action="@Url.Action("GenerateCustomerList", "Customer")" method="get">
            <input class="btn btn-secondary btn-lg btn-block" type="submit" value="Download Customers" />
        </form>
    </div>

    <!--Modal Activation Button-->
    <div class="mt-4 pt-2" style="padding-left: 40px; margin-left: 100px;">

        <input data-toggle="modal" id="openModal" data-target="#createCustomerModal" class="btn btn-primary btn-lg btn-block" type="submit" value="Register" />

    </div>

    <!--Register Customer Modal-->
    <div class="modal fade" id="createCustomerModal" data-backdrop="static" data-keyboard="false" tabindex="-1" aria-labelledby="createInvoiceModalLabel" aria-hidden="true" style="color:black">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title" id="createInvoiceModalLabel"> <strong>Register Customer</strong></h3>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="card rounded shadow">
                        <div class="card-body">
                            @using (Html.BeginForm("Create", "Customer", FormMethod.Post, new { id = "createForm" }))
                            {
                                @Html.AntiForgeryToken()

                                <div class="card shadow-2-strong card-registration" style="border-radius: 15px;">

                                    <div class="card-body p-4 p-md-5">
                                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                                        <div class="row">
                                            <div class="col-md-4 mb-4">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(m => m.cFirstName)
                                                    @Html.EditorFor(model => model.cFirstName, new { htmlAttributes = new { @class = "form-control form-control-lg", @id = "firstName" } })
                                                    @Html.ValidationMessageFor(model => model.cFirstName, "", new { @class = "text-danger" })
                                                </div>

                                            </div>
                                            <div class="col-md-4 mb-4">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(model => model.cMidName)
                                                    @Html.EditorFor(model => model.cMidName, new { htmlAttributes = new { @class = "form-control form-control-lg", @id = "midName" } })
                                                    @Html.ValidationMessageFor(model => model.cMidName, "", new { @class = "text-danger" })
                                                </div>

                                            </div>

                                            <div class="col-md-4 mb-4">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(model => model.cLastName)
                                                    @Html.EditorFor(model => model.cLastName, new { htmlAttributes = new { @class = "form-control form-control-lg", @id = "lastName" } })
                                                    @Html.ValidationMessageFor(model => model.cLastName, "", new { @class = "text-danger" })
                                                </div>

                                            </div>

                                        </div>

                                        <div class="row">

                                            <div class="col-md-6 mb-4 d-flex align-items-center">


                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(model => model.cAddress)
                                                    @Html.EditorFor(model => model.cAddress, new { htmlAttributes = new { @class = "form-control form-control-lg", @id = "address" } })
                                                    @Html.ValidationMessageFor(model => model.cAddress, "", new { @class = "text-danger" })
                                                </div>

                                            </div>

                                            <div class="col-md-6 mb-4 pb-2">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(model => model.Branch)
                                                    @Html.DropDownListFor(model => model.Branch, new SelectList(Model.SelectedBranch), "Select Branch", new { @class = "form-control", id = "branchDropdown" })
                                                    @Html.ValidationMessageFor(model => model.Branch, "", new { @class = "text-danger" })
                                                </div>
                                                @Html.HiddenFor(model => model.Branch)

                                            </div>

                                        </div>

                                        <div class="row">
                                            <div class="col-md-6 mb-4 pb-2">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(model => model.cNumber)
                                                    @Html.EditorFor(model => model.cNumber, new { htmlAttributes = new { @class = "form-control form-control-lg", @id = "number" } })
                                                    @Html.ValidationMessageFor(model => model.cNumber, "", new { @class = "text-danger" })
                                                </div>

                                            </div>
                                            <div class="col-md-6 mb-4 pb-2">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(model => model.cNumberOp)
                                                    @Html.EditorFor(model => model.cNumberOp, new { htmlAttributes = new { @class = "form-control form-control-lg", @id = "number2" } })
                                                    @Html.ValidationMessageFor(model => model.cNumberOp, "", new { @class = "text-danger" })
                                                </div>

                                            </div>
                                        </div>

                                        <div class="row">
                                            <div class="col-md-6 mb-4 pb-2">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(model => model.MeterID)
                                                    @Html.DropDownListFor(model => model.MeterID, new SelectList(Model.SelectedMeterID), "Select a Meter", new { @class = "form-control", id = "meterDropdown" })
                                                    @Html.ValidationMessageFor(model => model.MeterID, "", new { @class = "text-danger" })
                                                </div>
                                                @Html.HiddenFor(model => model.MeterID)

                                            </div>

                                            <div class="col-md-6 mb-4 pb-2">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(model => model.Type)
                                                    @Html.DropDownListFor(model => model.Type, new SelectList(Model.SelectedType), "Select Meter Type", new { @class = "form-control", id = "meterTypeDropdown" })
                                                    @Html.ValidationMessageFor(model => model.Type, "", new { @class = "text-danger" })
                                                </div>
                                                @Html.HiddenFor(model => model.Type)

                                            </div>

                                        </div>

                                        <div class="row">
                                            <div class="col-md-6 mb-4 pb-2">
                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(model => model.lockNumber)
                                                    @Html.EditorFor(model => model.lockNumber, new { htmlAttributes = new { @class = "form-control form-control-lg", @id = "lockNumber" } })
                                                    @Html.ValidationMessageFor(model => model.lockNumber, "", new { @class = "text-danger" })
                                                </div>
                                            </div>

                                        </div>

                                        <div class="row">
                                            <div class="col-md-6 mb-4 pb-2">
                                                <input type="submit" value="Create" class="btn btn-success btn-lg btn-block" />
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!--Update Customer Modal-->
    <div class="modal fade" id="updateCustomerModal" data-backdrop="static" data-keyboard="false" tabindex="-1" aria-labelledby="createInvoiceModalLabel" aria-hidden="true" style="color:black">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title" id="createInvoiceModalLabel"> <strong>Update Customer</strong></h3>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="card rounded shadow">
                        <div class="card-body">
                            @using (Html.BeginForm("UpdateCustomer", "Customer", FormMethod.Post, new { id = "updateCustomerForm" }))
                            {
                                @Html.AntiForgeryToken()
                                @Html.HiddenFor(model => model.cID, new { id = "cID" })

                                <div class="card shadow-2-strong card-registration" style="border-radius: 15px;">

                                    <div class="card-body p-4 p-md-5">
                                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                                        <div class="row">
                                            <div class="col-md-4 mb-4">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(m => m.cFirstName)
                                                    @Html.EditorFor(model => model.cFirstName, new { htmlAttributes = new { @class = "form-control form-control-lg", @id = "firstNameUpdate" } })
                                                    @Html.ValidationMessageFor(model => model.cFirstName, "", new { @class = "text-danger" })
                                                </div>

                                            </div>
                                            <div class="col-md-4 mb-4">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(model => model.cMidName)
                                                    @Html.EditorFor(model => model.cMidName, new { htmlAttributes = new { @class = "form-control form-control-lg", @id = "midNameUpdate" } })
                                                    @Html.ValidationMessageFor(model => model.cMidName, "", new { @class = "text-danger" })
                                                </div>

                                            </div>

                                            <div class="col-md-4 mb-4">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(model => model.cLastName)
                                                    @Html.EditorFor(model => model.cLastName, new { htmlAttributes = new { @class = "form-control form-control-lg", @id = "lastNameUpdate" } })
                                                    @Html.ValidationMessageFor(model => model.cLastName, "", new { @class = "text-danger" })
                                                </div>

                                            </div>

                                        </div>

                                        <div class="row">

                                            <div class="col-md-6 mb-4 d-flex align-items-center">


                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(model => model.cAddress)
                                                    @Html.EditorFor(model => model.cAddress, new { htmlAttributes = new { @class = "form-control form-control-lg", @id = "addressUpdate" } })
                                                    @Html.ValidationMessageFor(model => model.cAddress, "", new { @class = "text-danger" })
                                                </div>

                                            </div>

                                            <div class="col-md-6 mb-4 d-flex align-items-center">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(model => model.Branch)
                                                    @Html.EditorFor(model => model.Branch, new { htmlAttributes = new { @class = "form-control form-control-lg", @id = "BranchUpdate" } })
                                                    @Html.ValidationMessageFor(model => model.Branch, "", new { @class = "text-danger" })
                                                </div>

                                            </div>

                                        </div>

                                        <div class="row">
                                            <div class="col-md-6 mb-4 pb-2">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(model => model.cNumber)
                                                    @Html.EditorFor(model => model.cNumber, new { htmlAttributes = new { @class = "form-control form-control-lg", @id = "numberUpdate" } })
                                                    @Html.ValidationMessageFor(model => model.cNumber, "", new { @class = "text-danger" })
                                                </div>

                                            </div>
                                            <div class="col-md-6 mb-4 pb-2">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(model => model.cNumberOp)
                                                    @Html.EditorFor(model => model.cNumberOp, new { htmlAttributes = new { @class = "form-control form-control-lg", @id = "number2Update" } })
                                                    @Html.ValidationMessageFor(model => model.cNumberOp, "", new { @class = "text-danger" })
                                                </div>

                                            </div>
                                        </div>

                                        <div class="row">
                                            <div class="col-md-6 mb-4 pb-2">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(model => model.MeterID)
                                                    @Html.EditorFor(model => model.MeterID, new { htmlAttributes = new { @class = "form-control form-control-lg", @id = "meterIDUpadte" } })
                                                    @Html.ValidationMessageFor(model => model.MeterID, "", new { @class = "text-danger" })
                                                </div>

                                            </div>

                                        </div>
                                        <div class="row">
                                            <div class="col-md-6 mb-4 pb-2">
                                                <input type="submit" value="Update" class="btn btn-primary btn-lg btn-block" />

                                            </div>


                                        </div>

                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!--Delete Customer Modal-->
    <div class="modal fade" id="deleteCustomerModal" data-backdrop="static" data-keyboard="false" tabindex="-1" aria-labelledby="createInvoiceModalLabel" aria-hidden="true" style="color:black">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title" id="createInvoiceModalLabel"> <strong>Delete Customer</strong></h3>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="card rounded shadow">
                        <div class="card-body">
                            @using (Html.BeginForm("Delete", "Customer", FormMethod.Post, new { id = "DeleteCustomerForm" }))
                            {
                                @Html.AntiForgeryToken()
                                @Html.HiddenFor(model => model.cID, new { id = "cIDDelete" })

                                <div class="card shadow-2-strong card-registration" style="border-radius: 15px;">

                                    <div class="card-body p-4 p-md-5">
                                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                                        <div class="row">
                                            <div class="col-md-4 mb-4">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(m => m.cFirstName)
                                                    @Html.EditorFor(model => model.cFirstName, new { htmlAttributes = new { @class = "form-control form-control-lg", @id = "firstNameDelete", @readonly = "readonly" } })
                                                    @Html.ValidationMessageFor(model => model.cFirstName, "", new { @class = "text-danger" })
                                                </div>

                                            </div>
                                            <div class="col-md-4 mb-4">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(model => model.cMidName)
                                                    @Html.EditorFor(model => model.cMidName, new { htmlAttributes = new { @class = "form-control form-control-lg", @id = "midNameDelete", @readonly = "readonly" } })
                                                    @Html.ValidationMessageFor(model => model.cMidName, "", new { @class = "text-danger" })
                                                </div>

                                            </div>

                                            <div class="col-md-4 mb-4">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(model => model.cLastName)
                                                    @Html.EditorFor(model => model.cLastName, new { htmlAttributes = new { @class = "form-control form-control-lg", @id = "lastNameDelete", @readonly = "readonly" } })
                                                    @Html.ValidationMessageFor(model => model.cLastName, "", new { @class = "text-danger" })
                                                </div>

                                            </div>

                                        </div>

                                        <div class="row">

                                            <div class="col-md-6 mb-4 d-flex align-items-center">


                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(model => model.cAddress)
                                                    @Html.EditorFor(model => model.cAddress, new { htmlAttributes = new { @class = "form-control form-control-lg", @id = "addressDelete", @readonly = "readonly" } })
                                                    @Html.ValidationMessageFor(model => model.cAddress, "", new { @class = "text-danger" })
                                                </div>

                                            </div>

                                            <div class="col-md-6 mb-4 d-flex align-items-center">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(model => model.Branch)
                                                    @Html.EditorFor(model => model.Branch, new { htmlAttributes = new { @class = "form-control form-control-lg", @id = "BranchDelete", @readonly = "readonly" } })
                                                    @Html.ValidationMessageFor(model => model.Branch, "", new { @class = "text-danger" })
                                                </div>

                                            </div>

                                        </div>

                                        <div class="row">
                                            <div class="col-md-6 mb-4 pb-2">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(model => model.cNumber)
                                                    @Html.EditorFor(model => model.cNumber, new { htmlAttributes = new { @class = "form-control form-control-lg", @id = "numberDelete", @readonly = "readonly" } })
                                                    @Html.ValidationMessageFor(model => model.cNumber, "", new { @class = "text-danger" })
                                                </div>

                                            </div>
                                            <div class="col-md-6 mb-4 pb-2">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(model => model.cNumberOp)
                                                    @Html.EditorFor(model => model.cNumberOp, new { htmlAttributes = new { @class = "form-control form-control-lg", @id = "number2Delete", @readonly = "readonly" } })
                                                    @Html.ValidationMessageFor(model => model.cNumberOp, "", new { @class = "text-danger" })
                                                </div>

                                            </div>
                                        </div>

                                        <div class="row">
                                            <div class="col-md-6 mb-4 pb-2">

                                                <div class="form-outline form-group">
                                                    @Html.LabelFor(model => model.MeterID)
                                                    @Html.EditorFor(model => model.MeterID, new { htmlAttributes = new { @class = "form-control form-control-lg", @id = "meterIDDelete", @readonly = "readonly" } })
                                                    @Html.ValidationMessageFor(model => model.MeterID, "", new { @class = "text-danger" })
                                                </div>

                                            </div>

                                        </div>

                                        <div class="row">
                                            <div class="col-md-6 mb-4 pb-2">
                                                <button type="submit" class="btn btn-danger btn-lg btn-block">Delete</button>
                                            </div>
                                        </div>

                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!--Index: DataTable-->
    <div class="container">
        <table id="myTable" class="table table-striped table-bordered" style="width:100%">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>First Name</th>
                    <th>Middle Name</th>
                    <th>Last Name</th>
                    <th>Address</th>
                    <th>Phone number</th>
                    <th>Number (Optional)</th>
                    <th>Meter ID</th>
                    <th>Meter Type</th>
                    <th>Lock Number</th>
                    <th>Branch</th>
                    <th>Balance</th>
                    <th>Actions</th>

                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.customersList)
                {
                    <tr>
                        <td>@Html.DisplayFor(modelItem => item.cID)</td>
                        <td>@Html.DisplayFor(modelItem => item.cFirstName)</td>
                        <td>@Html.DisplayFor(modelItem => item.cMidName)</td>
                        <td>@Html.DisplayFor(modelItem => item.cLastName)</td>
                        <td>@Html.DisplayFor(modelItem => item.cAddress)</td>
                        <td>@Html.DisplayFor(modelItem => item.cNumber)</td>
                        <td>@Html.DisplayFor(modelItem => item.cNumberOp)</td>
                        <td>@Html.DisplayFor(modelItem => item.MeterID)</td>
                        <td>@Html.DisplayFor(modelItem => item.Type)</td>
                        <td>@Html.DisplayFor(modelItem => item.lockNumber)</td>
                        <td>@Html.DisplayFor(modelItem => item.Branch)</td>
                        <td>@Html.DisplayFor(modelItem => item.Balance)</td>
                        <td>
                            <a href="#" data-toggle="modal" data-target="#updateCustomerModal" id="@item.cID">
                                <i class="fa-solid fa-square-pen fa-1x" style="color: #1ABC9C;"></i>
                            </a>

                            <a href="#" data-toggle="modal" data-target="#deleteCustomerModal" id="@item.cID">
                                <i class="fas fa-trash fa-1x delete-icon item" style="color: #FF5733"></i>
                            </a>

                            <a href="@Url.Action("CustomerInfo", "Customer", new { id = item.cID })">
                                <i class="fa-solid fa-file-pdf fa-1x" style="color: navy"></i>
                            </a>

                        </td>
                    </tr>
                }


            </tbody>
        </table>

        <script>
            new DataTable('#myTable');
        </script>

    </div>

    <!--Populate Meter ID Dropdown-->
    <script>
        $(document).ready(function () {
        // Click event handler for opening the modal
        $("#openModal").click(function () {
            // Perform an AJAX request to fetch data
            $.ajax({
                type: "GET",
                url: "@Url.Action("GetInactiveMeter", "Customer")",
                dataType: "json",
                success: function (data) {
                    // Clear the existing dropdown options
                    $("#meterDropdown").empty();

                    // Populate the dropdown with the fetched data
                    $.each(data, function (index, item) {
                        $("#meterDropdown").append($("<option>").text(item).val(item));
                    });

                },
                error: function () {
                    // Handle errors if the AJAX request fails
                    alert("Failed to fetch data.");
                }
            });
        });
    });
    </script>

    <!--Populate Meter Type Dropdown-->
    <script>
        $(document).ready(function () {
        // Click event handler for opening the modal
        $("#openModal").click(function () {
            // Perform an AJAX request to fetch data
            $.ajax({
                type: "GET",
                url: "@Url.Action("GetMeterType", "Customer")",
                dataType: "json",
                success: function (data) {
                    // Clear the existing dropdown options
                    $("#meterTypeDropdown").empty();

                    // Populate the dropdown with the fetched data
                    $.each(data, function (index, item) {
                        $("#meterTypeDropdown").append($("<option>").text(item).val(item));
                    });

                },
                error: function () {
                    // Handle errors if the AJAX request fails
                    alert("Failed to fetch data.");
                }
            });
        });
    });
    </script>

    <!--Populate Branch Dropdown-->
    <script>
        $(document).ready(function () {
        // Click event handler for opening the modal
        $("#openModal").click(function () {
            // Perform an AJAX request to fetch data
            $.ajax({
                type: "GET",
                url: "@Url.Action("GetBranches", "Customer")",
                dataType: "json",
                success: function (data) {
                    // Clear the existing dropdown options
                    $("#branchDropdown").empty();

                    // Populate the dropdown with the fetched data
                    $.each(data, function (index, item) {
                        $("#branchDropdown").append($("<option>").text(item).val(item));
                    });

                },
                error: function () {
                    // Handle errors if the AJAX request fails
                    alert("Failed to fetch data.");
                }
            });
        });
    });
    </script>

    <!--Create Validation Script-->
    <script>
        // Text validation function
        function validateText(input) {
            if (!isNaN(Number(input.value))) {
                alert('Please enter text');
                input.value = '';
            }
        }

        // Number validation function
        function validateNumber(input) {
            if (isNaN(Number(input.value))) {
                alert('Please enter a number');
                input.value = '';
            }
        }

        // Get elements
        const firstNameInput = document.querySelector('#firstName');
        const midNameInput = document.querySelector('#midName');
        const lastNameInput = document.querySelector('#lastName');
        const addressInput = document.querySelector('#address');
        const Branch = document.querySelector('#Branch');
        const phone1Input = document.querySelector('#number');
        const phone2Input = document.querySelector('#number2');

        // Attach listeners
        firstNameInput.addEventListener('input', () => {
            validateText(firstNameInput);
        });

        midNameInput.addEventListener('input', () => {
            validateText(midNameInput);
        });

        lastNameInput.addEventListener('input', () => {
            validateText(lastNameInput);
        });

        addressInput.addEventListener('input', () => {
            validateText(addressInput);
        });

        Branch.addEventListener('input', () => {
            validateText(Branch);
        });

        phone1Input.addEventListener('input', () => {
            validateNumber(phone1Input);
        });

        phone2Input.addEventListener('input', () => {
            validateNumber(phone2Input);
        });


    </script>

    <!--Customer Insert Script-->
    <script>
    $(document).ready(function () {
        $("#createForm").submit(function (e) {
            e.preventDefault(); // Prevent the default form submission

            var formData = $(this).serialize(); // Serialize form data

            $.ajax({
                type: "POST",
                url: "@Url.Action("Create", "Customer")",
                data: formData,
                success: function (response) {
                    if (response.success) {
                        alert(response.message);
                        location.reload();
                    } else {
                        alert("Failed to Insert customer!.");
                    }
                },
                error: function () {
                    alert("An error occurred while updating the customer.");
                }
            });
        });
    });
    </script>

    <!--Customer Data Fetching Script (Update)-->
    <script>

                        console.log('I am being reached');

                            $(document).ready(function () {
                                $("a[data-toggle='modal']").click(function () {
                                    var cID = $(this).attr("id");
                                $.ajax({
                            url: '@Url.Action("GetCustomerData", "Customer")',
                            type: 'POST',
                            data: { id: cID },
                            success: function (data) {
                                // Populate the form fields with the retrieved data
                                $("#cID").val(cID);
                                $("#firstNameUpdate").val(data.cFirstName);
                                $("#midNameUpdate").val(data.cMidName);
                                $("#lastNameUpdate").val(data.cLastName);
                                $("#addressUpdate").val(data.cAddress);
                                $("#BranchUpdate").val(data.Branch);
                                $("#numberUpdate").val(data.cNumber);
                                $("#number2Update").val(data.cNumberOp);
                                $("#meterIDUpadte").val(data.MeterID);

                            },
                            error: function () {
                                alert("Error fetching invoice data.");
                            }
                        });
                    });
                });
    </script>

    <!--Customer Update Script-->
    <script>
    $(document).ready(function () {
        $("#updateCustomerForm").submit(function (e) {
            e.preventDefault(); // Prevent the default form submission

            var formData = $(this).serialize(); // Serialize form data

            $.ajax({
                type: "POST",
                url: "@Url.Action("UpdateCustomer", "Customer")",
                data: formData,
                success: function (response) {
                    if (response.success) {
                        alert(response.message);
                        location.reload();
                    } else {
                        alert("Failed to update customer!.");
                    }
                },
                error: function () {
                    alert("An error occurred while updating the customer.");
                }
            });
        });
    });
    </script>

    <!--Customer Data Fetching Script (Delete)-->
    <script>

                        console.log('I am being reached');

                            $(document).ready(function () {
                                $("a[data-toggle='modal']").click(function () {
                                    window.cID = $(this).attr("id");
                                $.ajax({
                            url: '@Url.Action("GetCustomerData", "Customer")',
                            type: 'POST',
                            data: { id: cID },
                            success: function (data) {
                                // Populate the form fields with the retrieved data
                                $("#cIDDelete").val(cID);
                                $("#firstNameDelete").val(data.cFirstName);
                                $("#midNameDelete").val(data.cMidName);
                                $("#lastNameDelete").val(data.cLastName);
                                $("#addressDelete").val(data.cAddress);
                                $("#BranchDelete").val(data.Branch);
                                $("#numberDelete").val(data.cNumber);
                                $("#number2Delete").val(data.cNumberOp);
                                $("#meterIDDelete").val(data.MeterID);

                            },
                            error: function () {
                                alert("Error fetching customer data.");
                            }
                        });
                    });
                });
    </script>

    <!--Delete Customer Script-->
    <script>
    console.log('I am being reached');

    // Function to handle the delete operation
    function handleDeleteClick() {
        // Access the global variable window.invID
        var cid = window.cID;

        $.ajax({
            url: '@Url.Action("Delete", "Customer")',
            type: 'POST',
            data: { id: cid },
            success: function (response) {
                if (response.success) {
                    alert(response.message);
                    location.reload();
                } else {
                    alert("Failed to delete customer!");
                }
            },
            error: function () {
                alert("An error occurred while deleting the customer.");
            }
        });
    }

    $(document).ready(function () {
        $("button[type='submit']").click(function (e) {
            e.preventDefault(); // Prevent the default form submission

            // Call the function to handle the delete operation
            handleDeleteClick();
        });
    });
    </script>

</body>
</html>
